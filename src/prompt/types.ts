import type { z } from 'zod';

export namespace Prompt {
  /**
   * A prompt chain that coordinates the template, functions, and validator.
   */
  export type Chain<Args extends Record<string, any>, Result extends any> = (
    args: Args
  ) => Promise<Result>;

  /**
   * Turn structured data into a message.
   */
  export type Template<T = Record<string, any>> = (
    params: T
  ) => Promise<Msg[]> | Msg[];

  /**
   * Validate the output of an LLM call
   */
  export type Validator<T> = (input: Msg) => Promise<T> | T;

  /**
   * A function meant to be used with OpenAI function calling.
   */
  export interface AIFunction<
    Schema extends z.ZodObject<any> = z.ZodObject<any>,
    Return extends any = any
  > {
    /** The implementation of the function, with arg parsing and validation. */
    (input: string | Msg): Promise<Return>;
    /** The Zod schema for the arguments string. */
    argsSchema: Schema;
    /** Parse the function arguments from a message. */
    parseArgs(input: string | Msg): z.infer<Schema>;
    /** The function spec for the OpenAI API `functions` property. */
    spec: {
      name: string;
      description?: string;
      parameters: Record<string, unknown>;
    };
  }

  /**
   * Generic/default OpenAI message without any narrowing applied
   */
  export interface Msg {
    /** The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls. */
    content: string | null;
    /** The role of the messages author. One of `system`, `user`, `assistant`, or `function`. */
    role: Msg.Role;
    /** The name and arguments of a function that should be called, as generated by the model. */
    function_call?: Msg.FunctionCall;
    /**
     * The name of the author of this message. `name` is required if role is
     * `function`, and it should be the name of the function whose response is in the
     * `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of
     * 64 characters.
     */
    name?: string;
  }

  /** Narrowed ChatModel.Message types. */
  export namespace Msg {
    /** The possible roles for a message. */
    export type Role = 'system' | 'user' | 'assistant' | 'function';

    /** The name and arguments of a function that should be called, as generated by the model. */
    export type FunctionCall = {
      /** The arguments to call the function with, as generated by the model in JSON format. */
      arguments: string;
      /** The name of the function to call. */
      name: string;
    };

    /** Message with text content for the system. */
    export type System = {
      role: 'system';
      name?: string;
      content: string;
    };

    /** Message with text content from the user. */
    export type User = {
      role: 'user';
      name?: string;
      content: string;
    };

    /** Message with text content from the assistant. */
    export type Assistant = {
      role: 'assistant';
      name?: string;
      content: string;
    };

    /** Message with arguments to call a function. */
    export type FuncCall = {
      role: 'assistant';
      name?: string;
      content: null;
      function_call: FunctionCall;
    };

    /** Message with the result of a function call. */
    export type FuncResult = {
      role: 'function';
      name: string;
      content: string;
    };
  }
}
