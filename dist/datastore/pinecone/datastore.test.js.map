{"version":3,"file":"datastore.test.js","sourceRoot":"","sources":["../../../src/datastore/pinecone/datastore.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { PineconeClient } from 'pinecone-client';\nimport { describe, expect, it, vi } from 'vitest';\nimport { SparseVectorModel } from '../../model/index.js';\nimport { EmbeddingModel } from '../../model/index.js';\nimport { PineconeDatastore } from './datastore.js';\nimport { PineconeHybridDatastore } from './hybrid-datastore.js';\n\nvi.mock('../../model/index.js', () => {\n  const EmbeddingModel = vi.fn();\n  const SparseVectorModel = vi.fn();\n  EmbeddingModel.prototype.run = vi\n    .fn()\n    .mockImplementation((args: { input: string[] }) => {\n      if (args.input.length === 1) {\n        return { embeddings: [[1, 1]] };\n      } else {\n        return {\n          embeddings: [\n            [1, 1],\n            [2, 2],\n          ],\n        };\n      }\n    });\n  SparseVectorModel.prototype.run = vi\n    .fn()\n    .mockImplementation((_args: { input: string[] }) => ({\n      vectors: [\n        { indices: [1, 1], values: [1, 1] },\n        { indices: [2, 2], values: [2, 2] },\n      ],\n    }));\n  return { EmbeddingModel, SparseVectorModel };\n});\n\nvi.mock('pinecone-client', () => {\n  const PineconeClient = vi.fn();\n  PineconeClient.prototype.query = vi.fn().mockImplementation(() => ({\n    matches: [],\n  }));\n  PineconeClient.prototype.upsert = vi\n    .fn()\n    .mockImplementation((_args: { vectors: unknown }) => {});\n  PineconeClient.prototype.query = vi.fn().mockImplementation(() => ({\n    query: {},\n    docs: [],\n  }));\n  return { PineconeClient };\n});\n\ntype Meta = { content: string };\n\ndescribe('Datastore', () => {\n  let datastore: PineconeDatastore<Meta>;\n  let embeddingModel: EmbeddingModel;\n  let client: PineconeClient<Meta>;\n\n  beforeEach(() => {\n    embeddingModel = new EmbeddingModel({\n      params: { model: 'text-embedding-ada-002' },\n    });\n    client = new PineconeClient({ apiKey: '', baseUrl: '' });\n    datastore = new PineconeDatastore<Meta>({\n      namespace: 'test',\n      contentKey: 'content',\n      embeddingModel,\n      pinecone: client,\n    });\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('upsert with embeddings', async () => {\n    await datastore.upsert([\n      {\n        id: '1',\n        metadata: { content: '1' },\n        embedding: [1, 1],\n      },\n      {\n        id: '2',\n        metadata: { content: '2' },\n        embedding: [2, 2],\n      },\n    ]);\n    // No embeddings should have been generated\n    expect(embeddingModel.run).not.toHaveBeenCalled();\n    // The documents should be upserted with their embeddings\n    expect(client.upsert).toHaveBeenCalledOnce();\n    expect(client.upsert).toHaveBeenCalledWith({\n      vectors: [\n        {\n          id: '1',\n          metadata: { content: '1' },\n          values: [1, 1],\n        },\n        {\n          id: '2',\n          metadata: { content: '2' },\n          values: [2, 2],\n        },\n      ],\n    });\n  });\n\n  it('upsert without embeddings', async () => {\n    await datastore.upsert([\n      { id: '1', metadata: { content: '1' } },\n      { id: '2', metadata: { content: '2' } },\n    ]);\n    // A batch of embeddings should have been generated\n    expect(embeddingModel.run).toHaveBeenCalledOnce();\n    expect(client.upsert).toHaveBeenCalledOnce();\n    expect(client.upsert).toHaveBeenCalledWith({\n      vectors: [\n        {\n          id: '1',\n          metadata: { content: '1' },\n          values: [1, 1],\n        },\n        {\n          id: '2',\n          metadata: { content: '2' },\n          values: [2, 2],\n        },\n      ],\n    });\n  });\n\n  it('upsert with some embeddings', async () => {\n    await datastore.upsert([\n      { id: '1', metadata: { content: '1' } },\n      {\n        id: '2',\n        metadata: { content: '2' },\n        embedding: [2, 2],\n      },\n      {\n        id: '3',\n        metadata: { content: '3' },\n        embedding: [3, 3],\n      },\n      { id: '4', metadata: { content: '4' } },\n    ]);\n    expect(embeddingModel.run).toHaveBeenCalledOnce();\n    expect(client.upsert).toHaveBeenCalledOnce();\n    expect(client.upsert).toHaveBeenCalledWith({\n      vectors: [\n        {\n          id: '1',\n          metadata: { content: '1' },\n          values: [1, 1],\n        },\n        {\n          id: '2',\n          metadata: { content: '2' },\n          values: [2, 2],\n        },\n        {\n          id: '3',\n          metadata: { content: '3' },\n          values: [3, 3],\n        },\n        {\n          id: '4',\n          metadata: { content: '4' },\n          values: [2, 2],\n        },\n      ],\n    });\n  });\n});\n\ndescribe('HybridDatastore', () => {\n  let datastore: PineconeHybridDatastore<Meta>;\n  let embeddingModel: EmbeddingModel;\n  let spladeModel: SparseVectorModel;\n  let pineconeClient: PineconeClient<Meta>;\n\n  beforeEach(() => {\n    embeddingModel = new EmbeddingModel({\n      params: { model: 'text-embedding-ada-002' },\n    });\n    spladeModel = new SparseVectorModel({\n      params: { model: 'naver/splade-cocondenser-ensembledistil' },\n    });\n    pineconeClient = new PineconeClient({ apiKey: '', baseUrl: '' });\n    datastore = new PineconeHybridDatastore<Meta>({\n      namespace: 'test',\n      contentKey: 'content',\n      embeddingModel,\n      spladeModel,\n      pinecone: pineconeClient,\n    });\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('upsert with embeddings', async () => {\n    await datastore.upsert([\n      {\n        id: '1',\n        metadata: { content: '1' },\n        embedding: [1, 1],\n        sparseVector: { indices: [1, 1], values: [1, 1] },\n      },\n      {\n        id: '2',\n        metadata: { content: '2' },\n        embedding: [2, 2],\n        sparseVector: { indices: [2, 2], values: [2, 2] },\n      },\n    ]);\n    // No embeddings should have been generated\n    expect(embeddingModel.run).not.toHaveBeenCalled();\n    expect(spladeModel.run).not.toHaveBeenCalled();\n    // The documents should be upserted with their embeddings\n    expect(pineconeClient.upsert).toHaveBeenCalledOnce();\n    expect(pineconeClient.upsert).toHaveBeenCalledWith({\n      vectors: [\n        {\n          id: '1',\n          metadata: { content: '1' },\n          values: [1, 1],\n          sparseValues: { indices: [1, 1], values: [1, 1] },\n        },\n        {\n          id: '2',\n          metadata: { content: '2' },\n          values: [2, 2],\n          sparseValues: { indices: [2, 2], values: [2, 2] },\n        },\n      ],\n    });\n  });\n\n  it('upsert without embeddings', async () => {\n    await datastore.upsert([\n      { id: '1', metadata: { content: '1' } },\n      { id: '2', metadata: { content: '2' } },\n    ]);\n    // A batch of embeddings should have been generated\n    expect(embeddingModel.run).toHaveBeenCalledOnce();\n    expect(spladeModel.run).toHaveBeenCalledOnce();\n    expect(pineconeClient.upsert).toHaveBeenCalledOnce();\n    expect(pineconeClient.upsert).toHaveBeenCalledWith({\n      vectors: [\n        {\n          id: '1',\n          metadata: { content: '1' },\n          values: [1, 1],\n          sparseValues: { indices: [1, 1], values: [1, 1] },\n        },\n        {\n          id: '2',\n          metadata: { content: '2' },\n          values: [2, 2],\n          sparseValues: { indices: [2, 2], values: [2, 2] },\n        },\n      ],\n    });\n  });\n\n  it('upsert with some embeddings', async () => {\n    await datastore.upsert([\n      { id: '1', metadata: { content: '1' } },\n      {\n        id: '2',\n        metadata: { content: '2' },\n        embedding: [2, 2],\n        sparseVector: { indices: [2, 2], values: [2, 2] },\n      },\n      {\n        id: '3',\n        metadata: { content: '3' },\n        embedding: [3, 3],\n        sparseVector: { indices: [3, 3], values: [3, 3] },\n      },\n      { id: '4', metadata: { content: '4' } },\n    ]);\n    expect(embeddingModel.run).toHaveBeenCalledOnce();\n    expect(pineconeClient.upsert).toHaveBeenCalledOnce();\n    expect(pineconeClient.upsert).toHaveBeenCalledWith({\n      vectors: [\n        {\n          id: '1',\n          metadata: { content: '1' },\n          values: [1, 1],\n          sparseValues: { indices: [1, 1], values: [1, 1] },\n        },\n        {\n          id: '2',\n          metadata: { content: '2' },\n          values: [2, 2],\n          sparseValues: { indices: [2, 2], values: [2, 2] },\n        },\n        {\n          id: '3',\n          metadata: { content: '3' },\n          values: [3, 3],\n          sparseValues: { indices: [3, 3], values: [3, 3] },\n        },\n        {\n          id: '4',\n          metadata: { content: '4' },\n          values: [2, 2],\n          sparseValues: { indices: [2, 2], values: [2, 2] },\n        },\n      ],\n    });\n  });\n\n  it('caches queries', async () => {\n    const datastore = new PineconeHybridDatastore<Meta>({\n      namespace: 'test',\n      contentKey: 'content',\n      embeddingModel,\n      spladeModel,\n      pinecone: pineconeClient,\n      cache: new Map(),\n    });\n    await datastore.query({ query: 'test' });\n    expect(pineconeClient.query).toHaveBeenCalledOnce();\n    await datastore.query({ query: 'test' });\n    expect(pineconeClient.query).toHaveBeenCalledOnce();\n  });\n});\n"]}