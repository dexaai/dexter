{"version":3,"file":"hybrid-datastore.js","sourceRoot":"","sources":["../../../src/datastore/pinecone/hybrid-datastore.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Model } from '../../model/index.js';\nimport { AbstractHybridDatastore } from '../hybrid-datastore.js';\nimport type { Datastore, Prettify } from '../types.js';\nimport type { PineconeClient } from './client.js';\nimport { createPineconeClient } from './client.js';\nimport type { Pinecone } from './types.js';\n\nexport class PineconeHybridDatastore<\n  DocMeta extends Datastore.BaseMeta\n> extends AbstractHybridDatastore<DocMeta, Pinecone.QueryFilter<DocMeta>> {\n  datastoreType = 'hybrid' as const;\n  datastoreProvider = 'pinecone' as const;\n  private readonly pinecone: PineconeClient<DocMeta>;\n\n  constructor(\n    args: Prettify<\n      Datastore.OptsHybrid<DocMeta, Pinecone.QueryFilter<DocMeta>> & {\n        pinecone?: PineconeClient<DocMeta>;\n      }\n    >\n  ) {\n    const { pinecone, ...rest } = args;\n    super(rest);\n    this.pinecone =\n      pinecone ||\n      createPineconeClient<DocMeta>({\n        namespace: this.namespace,\n      });\n  }\n\n  async runQuery(\n    query: Datastore.Query<DocMeta, Pinecone.QueryFilter<DocMeta>>,\n    context?: Datastore.Ctx\n  ): Promise<Datastore.QueryResult<DocMeta>> {\n    const mergedContext = { ...this.context, ...context };\n\n    // Get the query embedding and sparse vector\n    const queryEmbedding = query.embedding;\n    const querySparseVector = query.sparseVector;\n    const [\n      { embeddings },\n      {\n        vectors: [sparseVector],\n      },\n    ] = await Promise.all([\n      queryEmbedding\n        ? { embeddings: [queryEmbedding] }\n        : this.embeddingModel.run(\n            {\n              input: [query.query],\n            },\n            mergedContext\n          ),\n      querySparseVector\n        ? { vectors: [querySparseVector] }\n        : this.spladeModel.run(\n            {\n              input: [query.query],\n            },\n            mergedContext\n          ),\n    ]);\n    const embedding = embeddings[0];\n\n    // Query Pinecone\n    const response = await this.pinecone.query({\n      topK: query.topK ?? 10,\n      ...(typeof query.minScore === 'number'\n        ? { minScore: query.minScore }\n        : {}),\n      ...(query.filter && { filter: query.filter }),\n      ...(typeof query.hybridAlpha === 'number' && {\n        hybridAlpha: query.hybridAlpha,\n      }),\n      includeValues: query.includeValues ?? false,\n      includeMetadata: true,\n      vector: embedding,\n      sparseVector: sparseVector,\n    });\n\n    const queryResult: Datastore.QueryResult<DocMeta> = {\n      query: query.query,\n      docs: response.matches,\n    };\n\n    return queryResult;\n  }\n\n  async upsert(\n    docs: Datastore.Doc<DocMeta>[],\n    context?: Datastore.Ctx\n  ): Promise<void> {\n    const mergedContext = { ...this.context, ...context };\n    try {\n      // Get the text from the docs that are missing embeddings or sparse vectors\n      const textsToEmbed = docs\n        .filter((doc) => doc.embedding == null || doc.sparseVector == null)\n        .map((doc) => {\n          const content = doc.metadata[this.contentKey];\n          if (typeof content !== 'string') {\n            throw new Error(\n              `The value of the contentKey (${String(\n                this.contentKey\n              )}) must be a string`\n            );\n          }\n          return content;\n        });\n\n      if (textsToEmbed.length === 0) {\n        return this.pinecone.upsert({\n          vectors: docs.map((doc, i) => ({\n            id: doc.id,\n            values: docs[i].embedding as number[],\n            sparseValues: docs[i].sparseVector as Model.SparseVector.Vector,\n            metadata: doc.metadata,\n          })),\n        });\n      }\n\n      // Create the embeddings and sparse vectors\n      // This relies on the classes to handle batching and throttling\n      const [embeddingRes, spladeRes] = await Promise.all([\n        this.embeddingModel.run({ input: textsToEmbed }, mergedContext),\n        this.spladeModel.run({ input: textsToEmbed }, mergedContext),\n      ]);\n\n      const embeddings = embeddingRes.embeddings;\n\n      // Merge the existing embeddings and sparse vectors with the generated ones\n      const docsWithEmbeddings = docs.map((doc) => {\n        let embedding = doc.embedding;\n        let sparseVector = doc.sparseVector;\n        // If the doc was missing an embedding or sparse vector, use the generated values\n        if (embedding == null || sparseVector == null) {\n          embedding = embeddings.shift();\n          sparseVector = spladeRes.vectors.shift();\n          if (embedding == null || sparseVector == null) {\n            throw new Error('Unexpected missing embedding or sparse vector');\n          }\n        }\n        return {\n          ...doc,\n          embedding,\n          sparseVector,\n        };\n      });\n\n      // Combine the results into Pinecones vector format and upsert\n      return this.pinecone.upsert({\n        vectors: docs.map((doc, i) => ({\n          id: doc.id,\n          values: docsWithEmbeddings[i].embedding,\n          sparseValues: docsWithEmbeddings[i].sparseVector,\n          metadata: doc.metadata,\n        })),\n      });\n    } catch (error) {\n      await Promise.allSettled(\n        this.events?.onError?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              datastoreType: this.datastoreType,\n              datastoreProvider: this.datastoreProvider,\n              error,\n              context: mergedContext,\n            })\n          )\n        ) ?? []\n      );\n      throw error;\n    }\n  }\n\n  async delete(docIds: string[]): Promise<void> {\n    return this.pinecone.delete({ ids: docIds });\n  }\n\n  async deleteAll(): Promise<void> {\n    return this.pinecone.delete({ deleteAll: true });\n  }\n}\n"]}