{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/datastore/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Model } from '../model/index.js';\nimport type { AbstractDatastore } from './datastore.js';\nimport { type CacheKey, type CacheStorage } from '../utils/cache.js';\n\n/** Improve preview of union types in autocomplete. */\nexport type Prettify<T> = { [K in keyof T]: T[K] } & {};\n\n/**\n * Generic Datastore extended by provider-specific implementations.\n */\nexport namespace Datastore {\n  /** Base document metadata to be extended */\n  export type BaseMeta = {};\n\n  /** Generic metadata object. */\n  export type Ctx = { [key: string]: any };\n\n  /** A Doc is the unit of storage for data in a Datastore */\n  export interface Doc<Meta extends BaseMeta = BaseMeta> {\n    id: string;\n    metadata: Meta;\n    embedding?: number[];\n    sparseVector?: Model.SparseVector.Vector;\n    score?: number;\n  }\n\n  /**\n   * Event handlers for logging and debugging\n   */\n  export interface Events<\n    DocMeta extends BaseMeta,\n    Filter extends BaseFilter<DocMeta>\n  > {\n    onQueryStart?: ((event: {\n      timestamp: string;\n      datastoreType: Type;\n      datastoreProvider: Provider;\n      query: Query<DocMeta, Filter>;\n      context: Ctx;\n    }) => void | Promise<void>)[];\n    onQueryComplete?: ((event: {\n      timestamp: string;\n      datastoreType: Type;\n      datastoreProvider: Provider;\n      query: Query<DocMeta, Filter>;\n      response: QueryResult<DocMeta>;\n      latency: number;\n      cached: boolean;\n      context: Ctx;\n    }) => void | Promise<void>)[];\n    onError?: ((event: {\n      timestamp: string;\n      datastoreType: Type;\n      datastoreProvider: Provider;\n      error: unknown;\n      context: Ctx;\n    }) => void | Promise<void>)[];\n  }\n\n  /**\n   * Abstract Datastore extended by provider specific implementations.\n   */\n  export type Datastore<\n    DocMeta extends BaseMeta,\n    Filter extends BaseFilter<DocMeta>\n  > = AbstractDatastore<DocMeta, Filter>;\n\n  /**\n   * Options for creating a Datastore instance.\n   */\n  export interface Opts<\n    DocMeta extends BaseMeta,\n    Filter extends BaseFilter<DocMeta>\n  > {\n    /**\n     * The metadata key of the content that is embedded.\n     * The value associated with the key must be a string.\n     */\n    contentKey: keyof DocMeta;\n    namespace?: string;\n    embeddingModel: Model.Embedding.Model;\n    /**\n     * A function that returns a cache key for the given params.\n     *\n     * A simple example would be: `(params) => JSON.stringify(params)`\n     *\n     * The default `cacheKey` function uses [hash-object](https://github.com/sindresorhus/hash-object) to create a stable sha256 hash of the params.\n     */\n    cacheKey?: CacheKey<Query<DocMeta, Filter>, string>;\n    /**\n     * Enables caching for queries. Must implement `.get(key)` and `.set(key, value)`, both of which can be either sync or async.\n     *\n     * Some examples include: `new Map()`, [quick-lru](https://github.com/sindresorhus/quick-lru), or any [keyv adaptor](https://github.com/jaredwray/keyv).\n     */\n    cache?: CacheStorage<string, QueryResult<DocMeta>>;\n    events?: Events<DocMeta, Filter>;\n    context?: Ctx;\n    /** Whether or not to add default `console.log` event handlers */\n    debug?: boolean;\n  }\n\n  /**\n   * Options for creating a hybrid Datastore instance (with Splade).\n   */\n  export interface OptsHybrid<\n    DocMeta extends BaseMeta,\n    Filter extends BaseFilter<DocMeta>\n  > extends Opts<DocMeta, Filter> {\n    /** Splade instance for creating sparse vectors */\n    spladeModel: Model.SparseVector.Model;\n  }\n\n  /** The provider of the vector database. */\n  export type Provider = (string & {}) | 'pinecone' | 'custom';\n\n  /**\n   * Arguments to run a query.\n   */\n  export interface Query<\n    Meta extends BaseMeta,\n    Filter extends BaseFilter<Meta>\n  > {\n    query: string;\n    embedding?: number[];\n    sparseVector?: Model.SparseVector.Vector;\n    topK?: number;\n    minScore?: number;\n    filter?: Filter;\n    includeValues?: boolean;\n    hybridAlpha?: number;\n  }\n\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export type BaseFilter<Meta extends BaseMeta> = any;\n\n  /**\n   * The results of running a query.\n   */\n  export interface QueryResult<Meta extends BaseMeta> {\n    query: string;\n    docs: ScoredDoc<Meta>[];\n    cached?: boolean;\n  }\n\n  /**\n   * Document with a query score (vector distance/similarity).\n   */\n  export interface ScoredDoc<Meta extends BaseMeta = BaseMeta>\n    extends Doc<Meta> {\n    score: number;\n  }\n\n  /** The type of embedding model. */\n  export type Type = (string & {}) | 'embedding' | 'hybrid';\n}\n"]}