{"version":3,"file":"vectors.js","sourceRoot":"","sources":["../../../src/datastore/utils/vectors.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,MAAM,OAAO,WAAW;IACtB,2DAA2D;IAC3D,MAAM,CAAC,gBAAgB,CAAC,CAAW,EAAE,CAAW;QAC9C,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAC1B,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAClC,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpB,UAAU,IAAI,MAAM,GAAG,MAAM,CAAC;YAC9B,iBAAiB,IAAI,MAAM,GAAG,MAAM,CAAC;YACrC,iBAAiB,IAAI,MAAM,GAAG,MAAM,CAAC;QACvC,CAAC;QAED,mFAAmF;QACnF,IAAI,iBAAiB,KAAK,CAAC,IAAI,iBAAiB,KAAK,CAAC,EAAE,CAAC;YACvD,OAAO,CAAC,CAAC;QACX,CAAC;QAED,MAAM,gBAAgB,GAAG,iBAAiB,GAAG,iBAAiB,CAAC;QAC/D,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAEzD,OAAO,UAAU,GAAG,oBAAoB,CAAC;IAC3C,CAAC;IAED,+CAA+C;IAC/C,MAAM,CAAC,UAAU,CAAC,CAAW,EAAE,CAAW;QACxC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAClC,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpB,UAAU,IAAI,MAAM,GAAG,MAAM,CAAC;QAChC,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,gBAAgB,CAAoC,IAK1D;QACC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;QACtD,MAAM,QAAQ,GACZ,gBAAgB,KAAK,kBAAkB;YACrC,CAAC,CAAC,WAAW,CAAC,gBAAgB;YAC9B,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC;QAC7B,MAAM,SAAS,GAA8B,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC9D,GAAG,GAAG;YACN,KAAK,EAAE,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC;SACvC,CAAC,CAAC,CAAC;QAEJ,wFAAwF;QACxF,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAE5C,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;CACF","sourcesContent":["/** Utilities for working with vectors/embeddings. */\nexport class VectorUtils {\n  /** Calculate the cosine similarity between two vectors. */\n  static cosineSimilarity(a: number[], b: number[]): number {\n    if (a.length !== b.length) {\n      throw new Error('Vectors must have the same length.');\n    }\n\n    let dotProduct = 0;\n    let aMagnitudeSquared = 0;\n    let bMagnitudeSquared = 0;\n\n    for (let i = 0; i < a.length; i++) {\n      const aValue = a[i];\n      const bValue = b[i];\n\n      dotProduct += aValue * bValue;\n      aMagnitudeSquared += aValue * aValue;\n      bMagnitudeSquared += bValue * bValue;\n    }\n\n    // Check for non-zero magnitude after the loop to avoid multiple divisions by zero.\n    if (aMagnitudeSquared === 0 || bMagnitudeSquared === 0) {\n      return 0;\n    }\n\n    const magnitudeProduct = aMagnitudeSquared * bMagnitudeSquared;\n    const magnitudeProductRoot = Math.sqrt(magnitudeProduct);\n\n    return dotProduct / magnitudeProductRoot;\n  }\n\n  /** Calculate the dot product of two vectors */\n  static dotProduct(a: number[], b: number[]): number {\n    if (a.length !== b.length) {\n      throw new Error('Vectors must have the same length.');\n    }\n\n    let dotProduct = 0;\n\n    for (let i = 0; i < a.length; i++) {\n      const aValue = a[i];\n      const bValue = b[i];\n\n      dotProduct += aValue * bValue;\n    }\n\n    return dotProduct;\n  }\n\n  /**\n   * Find the nearest neighbors of a vector in a set of documents with embeddings.\n   * @param vector The vector to find neighbors for.\n   * @param docs The set of documents with a vector/embedding to search.\n   * @param topK The number of neighbors to find.\n   * @param distanceFunction The distance function to use.\n   * @returns The k nearest neighbors of the vector with the similarity score added (sorted by similarity).\n   */\n  static nearestNeighbors<D extends { embedding: number[] }>(args: {\n    vector: number[];\n    docs: D[];\n    topK: number;\n    distanceFunction?: 'cosineSimilarity' | 'dotProduct';\n  }): (D & { score: number })[] {\n    const { vector, docs, topK, distanceFunction } = args;\n    const distance =\n      distanceFunction === 'cosineSimilarity'\n        ? VectorUtils.cosineSimilarity\n        : VectorUtils.dotProduct;\n    const distances: (D & { score: number })[] = docs.map((doc) => ({\n      ...doc,\n      score: distance(vector, doc.embedding),\n    }));\n\n    // Sort the distances in descending order of similarity (higher similarity means closer)\n    distances.sort((a, b) => b.score - a.score);\n\n    return distances.slice(0, topK);\n  }\n}\n"]}