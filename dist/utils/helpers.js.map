{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/utils/helpers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAMhE,MAAM,CAAC,MAAM,SAAS,GAAc,aAAa,EAAE,CAAC;AAEpD;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,CAClB,GAAM,EACN,GAAG,IAAS,EACA,EAAE,CACd,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAQ,CAAC,CAAC,CACvD,CAAC;AAEX;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,CAClB,GAAM,EACN,GAAG,IAAS,EACA,EAAE,CACd,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAQ,CAAC,CAAC,CACtD,CAAC","sourcesContent":["import { deepmerge as deepmergeInit } from '@fastify/deepmerge';\n\n/** Improve preview of union types in autocomplete. */\nexport type Prettify<T> = { [K in keyof T]: T[K] } & {};\n\ntype DeepMerge = ReturnType<typeof deepmergeInit>;\nexport const deepMerge: DeepMerge = deepmergeInit();\n\n/**\n * From `obj`, create a new object that does not include `keys`.\n *\n * @example\n * ```\n * omit({ a: 1, b: 2, c: 3 }, 'a', 'c') // { b: 2 }\n * ```\n */\nexport const omit = <T extends Record<any, unknown>, K extends keyof T>(\n  obj: T,\n  ...keys: K[]\n): Omit<T, K> =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([k]) => !keys.includes(k as any))\n  ) as any;\n\n/**\n * From `obj`, create a new object that only includes `keys`.\n *\n * @example\n * ```\n * pick({ a: 1, b: 2, c: 3 }, 'a', 'c') // { a: 1, c: 3 }\n * ```\n */\nexport const pick = <T extends Record<any, unknown>, K extends keyof T>(\n  obj: T,\n  ...keys: K[]\n): Pick<T, K> =>\n  Object.fromEntries(\n    Object.entries(obj).filter(([k]) => keys.includes(k as any))\n  ) as any;\n"]}