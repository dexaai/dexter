{"version":3,"file":"message.js","sourceRoot":"","sources":["../../../src/prompt/utils/message.ts"],"names":[],"mappings":"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","sourcesContent":["import dedent from 'dedent';\nimport type { Jsonifiable } from 'type-fest';\nimport type { Prompt } from '../types.js';\nimport { stringifyForModel } from '../functions/stringify-for-model.js';\n\n/**\n * Clean a string by removing extra newlines and indentation.\n * @see: https://github.com/dmnd/dedent\n */\nexport function cleanString(text: string): string {\n  // TODO: Should this trim the output as well? could be useful for multiline\n  // templated strings which begin or end with unnecessary newlines.\n  const dedenter = dedent.withOptions({ escapeSpecialCharacters: true });\n  return dedenter(text);\n}\n\n/** Utility class for creating and checking message types. */\nexport class Msg {\n  /** Create a system message. Cleans indentation and newlines by default. */\n  static system(\n    content: string,\n    opts?: {\n      /** Custom name for the message. */\n      name?: string;\n      /** Whether to clean extra newlines and indentation. Defaults to true. */\n      cleanContent?: boolean;\n    }\n  ): Prompt.Msg.System {\n    const { name, cleanContent = true } = opts ?? {};\n    return {\n      role: 'system',\n      content: cleanContent ? cleanString(content) : content,\n      ...(name ? { name } : {}),\n    };\n  }\n\n  /** Create a user message. Cleans indentation and newlines by default. */\n  static user(\n    content: string,\n    opts?: {\n      /** Custom name for the message. */\n      name?: string;\n      /** Whether to clean extra newlines and indentation. Defaults to true. */\n      cleanContent?: boolean;\n    }\n  ): Prompt.Msg.User {\n    const { name, cleanContent = true } = opts ?? {};\n    return {\n      role: 'user',\n      content: cleanContent ? cleanString(content) : content,\n      ...(name ? { name } : {}),\n    };\n  }\n\n  /** Create an assistant message. Cleans indentation and newlines by default. */\n  static assistant(\n    content: string,\n    opts?: {\n      /** Custom name for the message. */\n      name?: string;\n      /** Whether to clean extra newlines and indentation. Defaults to true. */\n      cleanContent?: boolean;\n    }\n  ): Prompt.Msg.Assistant {\n    const { name, cleanContent = true } = opts ?? {};\n    return {\n      role: 'assistant',\n      content: cleanContent ? cleanString(content) : content,\n      ...(name ? { name } : {}),\n    };\n  }\n\n  /** Create a function call message with argumets. */\n  static funcCall(\n    function_call: {\n      /** Name of the function to call. */\n      name: string;\n      /** Arguments to pass to the function. */\n      arguments: string;\n    },\n    opts?: {\n      /** The name descriptor for the message.(message.name) */\n      name?: string;\n    }\n  ): Prompt.Msg.FuncCall {\n    return {\n      ...opts,\n      role: 'assistant',\n      content: null,\n      function_call,\n    };\n  }\n\n  /** Create a function result message. */\n  static funcResult(content: Jsonifiable, name: string): Prompt.Msg.FuncResult {\n    const contentString = stringifyForModel(content);\n    return { role: 'function', content: contentString, name };\n  }\n\n  /** Create a function call message with argumets. */\n  static toolCall(\n    tool_calls: Prompt.Msg.Call.Tool[],\n    opts?: {\n      /** The name descriptor for the message.(message.name) */\n      name?: string;\n    }\n  ): Prompt.Msg.ToolCall {\n    return {\n      ...opts,\n      role: 'assistant',\n      content: null,\n      tool_calls,\n    };\n  }\n\n  /** Create a tool call result message. */\n  static toolResult(\n    content: Jsonifiable,\n    tool_call_id: string,\n    opts?: {\n      /** The name of the tool which was called */\n      name?: string;\n    }\n  ): Prompt.Msg.ToolResult {\n    const contentString = stringifyForModel(content);\n    return { ...opts, role: 'tool', tool_call_id, content: contentString };\n  }\n\n  /** Get the narrowed message from an EnrichedResponse. */\n  static getMessage(\n    // @TODO\n    response: any\n    // response: ChatModel.EnrichedResponse\n  ): Prompt.Msg.Assistant | Prompt.Msg.FuncCall | Prompt.Msg.ToolCall {\n    const msg = response.choices[0].message as Prompt.Msg;\n    return this.narrowResponseMessage(msg);\n  }\n\n  /** Narrow a message received from the API. It only responds with role=assistant */\n  static narrowResponseMessage(\n    msg: Prompt.Msg\n  ): Prompt.Msg.Assistant | Prompt.Msg.FuncCall | Prompt.Msg.ToolCall {\n    if (msg.content === null && msg.tool_calls != null) {\n      return Msg.toolCall(msg.tool_calls);\n    } else if (msg.content === null && msg.function_call != null) {\n      return Msg.funcCall(msg.function_call);\n    } else if (msg.content !== null) {\n      return Msg.assistant(msg.content);\n    } else {\n      // @TODO: probably don't want to error here\n      console.log('Invalid message', msg);\n      throw new Error('Invalid message');\n    }\n  }\n\n  /** Check if a message is a system message. */\n  static isSystem(message: Prompt.Msg): message is Prompt.Msg.System {\n    return message.role === 'system';\n  }\n  /** Check if a message is a user message. */\n  static isUser(message: Prompt.Msg): message is Prompt.Msg.User {\n    return message.role === 'user';\n  }\n  /** Check if a message is an assistant message. */\n  static isAssistant(message: Prompt.Msg): message is Prompt.Msg.Assistant {\n    return message.role === 'assistant' && message.content !== null;\n  }\n  /** Check if a message is a function call message with arguments. */\n  static isFuncCall(message: Prompt.Msg): message is Prompt.Msg.FuncCall {\n    return message.role === 'assistant' && message.function_call != null;\n  }\n  /** Check if a message is a function result message. */\n  static isFuncResult(message: Prompt.Msg): message is Prompt.Msg.FuncResult {\n    return message.role === 'function' && message.name != null;\n  }\n  /** Check if a message is a tool calls message. */\n  static isToolCall(message: Prompt.Msg): message is Prompt.Msg.ToolCall {\n    return message.role === 'assistant' && message.tool_calls != null;\n  }\n  /** Check if a message is a tool call result message. */\n  static isToolResult(message: Prompt.Msg): message is Prompt.Msg.ToolResult {\n    return message.role === 'tool' && !!message.tool_call_id;\n  }\n\n  /** Narrow a ChatModel.Message to a specific type. */\n  static narrow(message: Prompt.Msg.System): Prompt.Msg.System;\n  static narrow(message: Prompt.Msg.User): Prompt.Msg.User;\n  static narrow(message: Prompt.Msg.Assistant): Prompt.Msg.Assistant;\n  static narrow(message: Prompt.Msg.FuncCall): Prompt.Msg.FuncCall;\n  static narrow(message: Prompt.Msg.FuncResult): Prompt.Msg.FuncResult;\n  static narrow(message: Prompt.Msg.ToolCall): Prompt.Msg.ToolCall;\n  static narrow(message: Prompt.Msg.ToolResult): Prompt.Msg.ToolResult;\n  static narrow(\n    message: Prompt.Msg\n  ):\n    | Prompt.Msg.System\n    | Prompt.Msg.User\n    | Prompt.Msg.Assistant\n    | Prompt.Msg.FuncCall\n    | Prompt.Msg.FuncResult\n    | Prompt.Msg.ToolCall\n    | Prompt.Msg.ToolResult {\n    if (this.isSystem(message)) {\n      return message;\n    }\n    if (this.isUser(message)) {\n      return message;\n    }\n    if (this.isAssistant(message)) {\n      return message;\n    }\n    if (this.isFuncCall(message)) {\n      return message;\n    }\n    if (this.isFuncResult(message)) {\n      return message;\n    }\n    if (this.isToolCall(message)) {\n      return message;\n    }\n    if (this.isToolResult(message)) {\n      return message;\n    }\n    throw new Error('Invalid message type');\n  }\n}\n"]}