{"version":3,"file":"message.test.js","sourceRoot":"","sources":["../../../src/prompt/utils/message.test.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,GAAG,EAAE,MAAM,cAAc,CAAC;AAGnC,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;IACnB,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,UAAU,GAAG;;KAElB,CAAC;QACF,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,UAAU,GAAG;;KAElB,CAAC;QACF,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC;YACvB;gBACE,EAAE,EAAE,mBAAmB;gBACvB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE;oBACR,SAAS,EAAE,6BAA6B;oBACxC,IAAI,EAAE,OAAO;iBACd;aACF;SACF,CAAC,CAAC;QACH,YAAY,CAAC,GAAG,CAAC,CAAC,aAAa,EAAuB,CAAC;QACvD,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC;QACjE,YAAY,CAAC,GAAG,CAAC,CAAC,aAAa,EAAyB,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,YAAY,CAAC,EAAwB,CAAC,CAAC,aAAa,EAAc,CAAC;QACnE,YAAY,CAAC,EAAgB,CAAC,CAAC,aAAa,EAAsB,CAAC;QACnE,YAAY,CAAC,EAAuB,CAAC,CAAC,aAAa,EAAsB,CAAC;QAC1E,YAAY,CAAC,EAAqB,CAAC,CAAC,aAAa,EAAsB,CAAC;QACxE,YAAY,CACV,EAA0B,CAC3B,CAAC,aAAa,EAAsB,CAAC;QACtC,YAAY,CAAC,EAAyB,CAAC,CAAC,aAAa,EAAsB,CAAC;QAC5E,YAAY,CACV,EAA2B,CAC5B,CAAC,aAAa,EAAsB,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type * as OpenAI from 'openai-fetch';\nimport { describe, expect, it } from 'vitest';\nimport { Msg } from './message.js';\nimport type { Prompt } from '../types.js';\n\ndescribe('Msg', () => {\n  it('creates a message and fixes indentation', () => {\n    const msgContent = `\n      Hello, World!\n    `;\n    const msg = Msg.system(msgContent);\n    expect(msg.role).toEqual('system');\n    expect(msg.content).toEqual('Hello, World!');\n  });\n\n  it('supports disabling indentation fixing', () => {\n    const msgContent = `\n      Hello, World!\n    `;\n    const msg = Msg.system(msgContent, { cleanContent: false });\n    expect(msg.content).toEqual('\\n      Hello, World!\\n    ');\n  });\n\n  it('handles tool calls request', () => {\n    const msg = Msg.toolCall([\n      {\n        id: 'fake-tool-call-id',\n        type: 'function',\n        function: {\n          arguments: '{\"prompt\": \"Hello, World!\"}',\n          name: 'hello',\n        },\n      },\n    ]);\n    expectTypeOf(msg).toMatchTypeOf<Prompt.Msg.ToolCall>();\n    expect(Msg.isToolCall(msg)).toBe(true);\n  });\n\n  it('handles tool call response', () => {\n    const msg = Msg.toolResult('Hello, World!', 'fake-tool-call-id');\n    expectTypeOf(msg).toMatchTypeOf<Prompt.Msg.ToolResult>();\n    expect(Msg.isToolResult(msg)).toBe(true);\n  });\n\n  it('prompt message types should interop with openai-fetch message types', () => {\n    expectTypeOf({} as OpenAI.ChatMessage).toMatchTypeOf<Prompt.Msg>();\n    expectTypeOf({} as Prompt.Msg).toMatchTypeOf<OpenAI.ChatMessage>();\n    expectTypeOf({} as Prompt.Msg.System).toMatchTypeOf<OpenAI.ChatMessage>();\n    expectTypeOf({} as Prompt.Msg.User).toMatchTypeOf<OpenAI.ChatMessage>();\n    expectTypeOf(\n      {} as Prompt.Msg.Assistant\n    ).toMatchTypeOf<OpenAI.ChatMessage>();\n    expectTypeOf({} as Prompt.Msg.FuncCall).toMatchTypeOf<OpenAI.ChatMessage>();\n    expectTypeOf(\n      {} as Prompt.Msg.FuncResult\n    ).toMatchTypeOf<OpenAI.ChatMessage>();\n  });\n});\n"]}