{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/prompt/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { z } from 'zod';\nimport type { SetOptional } from 'type-fest';\nimport type { Model } from '../index.js';\n\nexport namespace Prompt {\n  /**\n   * A runner that iteratively calls the model and handles function calls.\n   */\n  export type Runner<Content extends any = string> = (\n    params: string | Runner.Params,\n    context?: Model.Ctx\n  ) => Promise<Runner.Response<Content>>;\n\n  export namespace Runner {\n    /** Parameters to execute a runner */\n    export type Params = SetOptional<\n      Model.Chat.Run & Model.Chat.Config,\n      'model'\n    >;\n\n    export type ModelParams = Partial<\n      Omit<\n        Model.Chat.Run & Model.Chat.Config,\n        'messages' | 'functions' | 'tools'\n      >\n    >;\n\n    /** Response from executing a runner */\n    export type Response<Content extends any = string> =\n      | {\n          status: 'success';\n          messages: Prompt.Msg[];\n          content: Content;\n        }\n      | {\n          status: 'error';\n          messages: Prompt.Msg[];\n          error: Error;\n        };\n\n    /** Controls use of functions or tool_calls from OpenAI API */\n    export type Mode = 'tools' | 'functions';\n  }\n\n  /**\n   * A function used to extract data using OpenAI function calling.\n   */\n  export type ExtractFunction<Schema extends z.ZodObject<any>> = (\n    params: string | Runner.Params,\n    context?: Model.Ctx\n  ) => Promise<z.infer<Schema>>;\n\n  export interface AIFunctionSpec {\n    name: string;\n    description?: string;\n    parameters: Record<string, unknown>;\n  }\n\n  /**\n   * A function meant to be used with OpenAI function calling.\n   */\n  export interface AIFunction<\n    Schema extends z.ZodObject<any> = z.ZodObject<any>,\n    Return extends any = any\n  > {\n    /** The implementation of the function, with arg parsing and validation. */\n    (input: string | Msg): Promise<Return>;\n    /** The Zod schema for the arguments string. */\n    argsSchema: Schema;\n    /** Parse the function arguments from a message. */\n    parseArgs(input: string | Msg): z.infer<Schema>;\n    /** The function spec for the OpenAI API `functions` property. */\n    spec: AIFunctionSpec;\n  }\n\n  /**\n   * Generic/default OpenAI message without any narrowing applied\n   */\n  export interface Msg {\n    /** The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls. */\n    content: string | null;\n    /** The role of the messages author. One of `system`, `user`, `assistant`, 'tool', or `function`. */\n    role: Msg.Role;\n    /** The name and arguments of a function that should be called, as generated by the model. */\n    function_call?: Msg.Call.Function;\n    /** The tool calls generated by the model, such as function calls. */\n    tool_calls?: Msg.Call.Tool[];\n    /**\n     * Tool call that this message is responding to.\n     */\n    tool_call_id?: string;\n    /**\n     * The name of the author of this message. `name` is required if role is\n     * `function`, and it should be the name of the function whose response is in the\n     * `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of\n     * 64 characters.\n     */\n    name?: string;\n  }\n\n  /** Narrowed ChatModel.Message types. */\n  export namespace Msg {\n    /** The possible roles for a message. */\n    export type Role = 'system' | 'user' | 'assistant' | 'function' | 'tool';\n\n    export namespace Call {\n      /** The name and arguments of a function that should be called, as generated by the model. */\n      export type Function = {\n        /** The arguments to call the function with, as generated by the model in JSON format. */\n        arguments: string;\n        /** The name of the function to call. */\n        name: string;\n      };\n\n      /** The tool calls generated by the model, such as function calls. */\n      export type Tool = {\n        /** The ID of the tool call. */\n        id: string;\n        /** The type of the tool. Currently, only `function` is supported. */\n        type: 'function';\n        /** The function that the model called. */\n        function: Call.Function;\n      };\n    }\n\n    /** Message with text content for the system. */\n    export type System = {\n      role: 'system';\n      content: string;\n      name?: string;\n    };\n\n    /** Message with text content from the user. */\n    export type User = {\n      role: 'user';\n      name?: string;\n      content: string;\n    };\n\n    /** Message with text content from the assistant. */\n    export type Assistant = {\n      role: 'assistant';\n      name?: string;\n      content: string;\n    };\n\n    /** Message with arguments to call a function. */\n    export type FuncCall = {\n      role: 'assistant';\n      name?: string;\n      content: null;\n      function_call: Call.Function;\n    };\n\n    /** Message with the result of a function call. */\n    export type FuncResult = {\n      role: 'function';\n      name: string;\n      content: string;\n    };\n\n    /** Message with arguments to call one or more tools. */\n    export type ToolCall = {\n      role: 'assistant';\n      name?: string;\n      content: null;\n      tool_calls: Call.Tool[];\n    };\n\n    /** Message with the result of a tool call. */\n    export type ToolResult = {\n      role: 'tool';\n      tool_call_id: string;\n      content: string;\n    };\n  }\n}\n"]}