{"version":3,"file":"ai-function.test.js","sourceRoot":"","sources":["../../../src/prompt/functions/ai-function.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEpD,MAAM,QAAQ,GAAG,gBAAgB,CAC/B;IACE,IAAI,EAAE,UAAU;IAChB,WAAW,EAAE,oCAAoC;IACjD,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC;QACnB,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE;QACjB,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;KACjB,CAAC;CACH,EACD,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;IACxB,OAAO,GAAG,KAAK,IAAI,IAAI,EAAE,CAAC;AAC5B,CAAC,CACF,CAAC;AAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CACvC,oCAAoC,CACrC,CAAC;QACF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;YACvC,UAAU,EAAE;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACzB,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;aACzB;YACD,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;YAC3B,IAAI,EAAE,QAAQ;YACd,oBAAoB,EAAE,KAAK;SAC5B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,CAAC,MAAM,QAAQ,CAAC,kCAAkC,CAAC,CAAC,CAAC,OAAO,CAChE,UAAU,CACX,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { z } from 'zod';\nimport { createAIFunction } from './ai-function.js';\n\nconst fullName = createAIFunction(\n  {\n    name: 'fullName',\n    description: 'Returns the full name of a person.',\n    argsSchema: z.object({\n      first: z.string(),\n      last: z.string(),\n    }),\n  },\n  async ({ first, last }) => {\n    return `${first} ${last}`;\n  }\n);\n\ndescribe('createAIFunction()', () => {\n  it('exposes OpenAI function calling spec', () => {\n    expect(fullName.spec.name).toEqual('fullName');\n    expect(fullName.spec.description).toEqual(\n      'Returns the full name of a person.'\n    );\n    expect(fullName.spec.parameters).toEqual({\n      properties: {\n        first: { type: 'string' },\n        last: { type: 'string' },\n      },\n      required: ['first', 'last'],\n      type: 'object',\n      additionalProperties: false,\n    });\n  });\n  it('executes the function', async () => {\n    expect(await fullName('{\"first\": \"John\", \"last\": \"Doe\"}')).toEqual(\n      'John Doe'\n    );\n  });\n});\n"]}