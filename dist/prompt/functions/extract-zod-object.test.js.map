{"version":3,"file":"extract-zod-object.test.js","sourceRoot":"","sources":["../../../src/prompt/functions/extract-zod-object.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAE3D,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxD,MAAM,CACJ,gBAAgB,CAAC;YACf,IAAI,EAAE,+BAA+B;YACrC,MAAM;SACP,CAAC,CACH,CAAC,OAAO,CAAC;YACR,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;SACxB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE,CACV,gBAAgB,CAAC;YACf,IAAI,EAAE,sBAAsB;YAC5B,MAAM;SACP,CAAC,CACH,CAAC,OAAO,CAAC,yDAAyD,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE,CACV,gBAAgB,CAAC;YACf,IAAI,EAAE,kBAAkB;YACxB,MAAM;SACP,CAAC,CACH,CAAC,OAAO,CACP,kEAAkE,CACnE,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { z } from 'zod';\nimport { extractZodObject } from './extract-zod-object.js';\n\ndescribe('extractZodObject()', () => {\n  it('extracts a valid object', () => {\n    const schema = z.object({ names: z.array(z.string()) });\n    expect(\n      extractZodObject({\n        json: `{ \"names\": [\"Alice\", \"Bob\"] }`,\n        schema,\n      })\n    ).toEqual({\n      names: ['Alice', 'Bob'],\n    });\n  });\n  it('returns error message for invalid JSON', () => {\n    const schema = z.object({ names: z.array(z.string()) });\n    expect(() =>\n      extractZodObject({\n        json: `{ \"names\": [\"Alice\",`,\n        schema,\n      })\n    ).toThrow('Unexpected end of JSON input while parsing empty string');\n  });\n  it('returns error message when zod validation fails', () => {\n    const schema = z.object({ names: z.array(z.string()) });\n    expect(() =>\n      extractZodObject({\n        json: `{ \"names\": [1] }`,\n        schema,\n      })\n    ).toThrow(\n      'Validation error: Expected string, received number at \"names[0]\"'\n    );\n  });\n});\n"]}