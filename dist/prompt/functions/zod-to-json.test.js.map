{"version":3,"file":"zod-to-json.test.js","sourceRoot":"","sources":["../../../src/prompt/functions/zod-to-json.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAEnD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,MAAM,GAAG,eAAe,CAC5B,CAAC,CAAC,MAAM,CAAC;YACP,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YACtD,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC;SAC1D,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,oBAAoB,EAAE,KAAK;YAC3B,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,MAAM,CAAC;YAClB,UAAU,EAAE;gBACV,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,oBAAoB;oBACjC,SAAS,EAAE,CAAC;iBACb;gBACD,GAAG,EAAE;oBACH,IAAI,EAAE,SAAS;oBACf,WAAW,EAAE,cAAc;iBAC5B;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,MAAM,GAAG,eAAe,CAC5B,CAAC,CAAC,MAAM,CAAC;YACP,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YACtD,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACnC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC5D,CAAC,CACH,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,oBAAoB,EAAE,KAAK;YAC3B,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC;YACzC,UAAU,EAAE;gBACV,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,oBAAoB;oBACjC,SAAS,EAAE,CAAC;iBACb;gBACD,OAAO,EAAE;oBACP,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;iBACzB;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;iBACzB;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { describe, expect, it } from 'vitest';\nimport { zodToJsonSchema } from './zod-to-json.js';\n\ndescribe('zodToJsonSchema', () => {\n  it('handles basic objects', () => {\n    const params = zodToJsonSchema(\n      z.object({\n        name: z.string().min(1).describe('Name of the person'),\n        age: z.number().int().optional().describe('Age in years'),\n      })\n    );\n    expect(params).toEqual({\n      additionalProperties: false,\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: {\n          type: 'string',\n          description: 'Name of the person',\n          minLength: 1,\n        },\n        age: {\n          type: 'integer',\n          description: 'Age in years',\n        },\n      },\n    });\n  });\n  it('handles enums and unions', () => {\n    const params = zodToJsonSchema(\n      z.object({\n        name: z.string().min(1).describe('Name of the person'),\n        sexEnum: z.enum(['male', 'female']),\n        sexUnion: z.union([z.literal('male'), z.literal('female')]),\n      })\n    );\n    expect(params).toEqual({\n      additionalProperties: false,\n      type: 'object',\n      required: ['name', 'sexEnum', 'sexUnion'],\n      properties: {\n        name: {\n          type: 'string',\n          description: 'Name of the person',\n          minLength: 1,\n        },\n        sexEnum: {\n          type: 'string',\n          enum: ['male', 'female'],\n        },\n        sexUnion: {\n          type: 'string',\n          enum: ['male', 'female'],\n        },\n      },\n    });\n  });\n});\n"]}