{"version":3,"file":"ai-function.js","sourceRoot":"","sources":["../../../src/prompt/functions/ai-function.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AACnD,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAE3D,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAElD;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAI9B,IAOC;AACD,wEAAwE;AACxE,cAA4D;IAE5D,qEAAqE;IACrE,MAAM,SAAS,GAAG,CAAC,KAA0B,EAAE,EAAE;QAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,gBAAgB,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QACpE,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC;YAC5C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACvE,CAAC;YACD,OAAO,gBAAgB,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,CAAC;IACH,CAAC,CAAC;IAEF,8DAA8D;IAC9D,MAAM,UAAU,GAAG,CAAC,KAA0B,EAAE,EAAE;QAChD,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,OAAO,cAAc,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;IACjC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACxC,UAAU,CAAC,IAAI,GAAG;QAChB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;QAChD,UAAU,EAAE,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC;KAC7C,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import type { z } from 'zod';\nimport { zodToJsonSchema } from './zod-to-json.js';\nimport { extractZodObject } from './extract-zod-object.js';\nimport type { Prompt } from '../types.js';\nimport { cleanString } from '../utils/message.js';\n\n/**\n * Create a function meant to be used with OpenAI tool or function calling.\n *\n * The returned function will parse the arguments string and call the\n * implementation function with the parsed arguments.\n *\n * The `spec` property of the returned function is the spec for adding the\n * function to the OpenAI API `functions` property.\n */\nexport function createAIFunction<\n  Schema extends z.ZodObject<any>,\n  Return extends any\n>(\n  spec: {\n    /** Name of the function. */\n    name: string;\n    /** Description of the function. */\n    description?: string;\n    /** Zod schema for the arguments string. */\n    argsSchema: Schema;\n  },\n  /** Implementation of the function to call with the parsed arguments. */\n  implementation: (params: z.infer<Schema>) => Promise<Return>\n): Prompt.AIFunction<Schema, Return> {\n  /** Parse the arguments string, optionally reading from a message. */\n  const parseArgs = (input: string | Prompt.Msg) => {\n    if (typeof input === 'string') {\n      return extractZodObject({ schema: spec.argsSchema, json: input });\n    } else {\n      const args = input.function_call?.arguments;\n      if (!args) {\n        throw new Error(`Missing required function_call.arguments property`);\n      }\n      return extractZodObject({ schema: spec.argsSchema, json: args });\n    }\n  };\n\n  // Call the implementation function with the parsed arguments.\n  const aiFunction = (input: string | Prompt.Msg) => {\n    const parsedArgs = parseArgs(input);\n    return implementation(parsedArgs);\n  };\n\n  aiFunction.parseArgs = parseArgs;\n  aiFunction.argsSchema = spec.argsSchema;\n  aiFunction.spec = {\n    name: spec.name,\n    description: cleanString(spec.description ?? ''),\n    parameters: zodToJsonSchema(spec.argsSchema),\n  };\n\n  return aiFunction;\n}\n"]}