{"version":3,"file":"extract-zod-object.js","sourceRoot":"","sources":["../../../src/prompt/functions/extract-zod-object.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAEtD;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAAkC,IAGjE;IACC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAoB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,yEAAyE;QACzE,yCAAyC;QACzC,IAAI,KAAK,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,YAAY,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;QACD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["import { z } from 'zod';\nimport { fromZodError } from 'zod-validation-error';\nimport { extractJsonObject } from './extract-json.js';\n\n/**\n * Extract an object from a JSON string and validate it against a Zod schema.\n * Throws an error with a message optimized for GPT readability if it fails.\n */\nexport function extractZodObject<Schema extends z.ZodObject<any>>(args: {\n  json: string;\n  schema: Schema;\n}): z.infer<Schema> {\n  try {\n    const json = extractJsonObject(args.json);\n    const parsed: z.infer<Schema> = args.schema.parse(json);\n    return parsed;\n  } catch (error) {\n    // Zod error messages are too verbose and confuse the model. This creates\n    // an error with a more readable message.\n    if (error instanceof z.ZodError) {\n      throw fromZodError(error);\n    }\n    throw error;\n  }\n}\n"]}