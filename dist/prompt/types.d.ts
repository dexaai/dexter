import type { z } from 'zod';
import type { SetOptional } from 'type-fest';
import type { Model } from '../index.js';
export declare namespace Prompt {
    /**
     * A runner that iteratively calls the model and handles function calls.
     */
    type Runner<Content extends any = string> = (params: string | Runner.Params, context?: Model.Ctx) => Promise<Runner.Response<Content>>;
    namespace Runner {
        /** Parameters to execute a runner */
        type Params = SetOptional<Model.Chat.Run & Model.Chat.Config, 'model'>;
        type ModelParams = Partial<Omit<Model.Chat.Run & Model.Chat.Config, 'messages' | 'functions' | 'tools'>>;
        /** Response from executing a runner */
        type Response<Content extends any = string> = {
            status: 'success';
            messages: Prompt.Msg[];
            content: Content;
        } | {
            status: 'error';
            messages: Prompt.Msg[];
            error: Error;
        };
        /** Controls use of functions or tool_calls from OpenAI API */
        type Mode = 'tools' | 'functions';
    }
    /**
     * A function used to extract data using OpenAI function calling.
     */
    type ExtractFunction<Schema extends z.ZodObject<any>> = (params: string | Runner.Params, context?: Model.Ctx) => Promise<z.infer<Schema>>;
    interface AIFunctionSpec {
        name: string;
        description?: string;
        parameters: Record<string, unknown>;
    }
    /**
     * A function meant to be used with OpenAI function calling.
     */
    interface AIFunction<Schema extends z.ZodObject<any> = z.ZodObject<any>, Return extends any = any> {
        /** The implementation of the function, with arg parsing and validation. */
        (input: string | Msg): Promise<Return>;
        /** The Zod schema for the arguments string. */
        argsSchema: Schema;
        /** Parse the function arguments from a message. */
        parseArgs(input: string | Msg): z.infer<Schema>;
        /** The function spec for the OpenAI API `functions` property. */
        spec: AIFunctionSpec;
    }
    /**
     * Generic/default OpenAI message without any narrowing applied
     */
    interface Msg {
        /** The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls. */
        content: string | null;
        /** The role of the messages author. One of `system`, `user`, `assistant`, 'tool', or `function`. */
        role: Msg.Role;
        /** The name and arguments of a function that should be called, as generated by the model. */
        function_call?: Msg.Call.Function;
        /** The tool calls generated by the model, such as function calls. */
        tool_calls?: Msg.Call.Tool[];
        /**
         * Tool call that this message is responding to.
         */
        tool_call_id?: string;
        /**
         * The name of the author of this message. `name` is required if role is
         * `function`, and it should be the name of the function whose response is in the
         * `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of
         * 64 characters.
         */
        name?: string;
    }
    /** Narrowed ChatModel.Message types. */
    namespace Msg {
        /** The possible roles for a message. */
        type Role = 'system' | 'user' | 'assistant' | 'function' | 'tool';
        namespace Call {
            /** The name and arguments of a function that should be called, as generated by the model. */
            type Function = {
                /** The arguments to call the function with, as generated by the model in JSON format. */
                arguments: string;
                /** The name of the function to call. */
                name: string;
            };
            /** The tool calls generated by the model, such as function calls. */
            type Tool = {
                /** The ID of the tool call. */
                id: string;
                /** The type of the tool. Currently, only `function` is supported. */
                type: 'function';
                /** The function that the model called. */
                function: Call.Function;
            };
        }
        /** Message with text content for the system. */
        type System = {
            role: 'system';
            content: string;
            name?: string;
        };
        /** Message with text content from the user. */
        type User = {
            role: 'user';
            name?: string;
            content: string;
        };
        /** Message with text content from the assistant. */
        type Assistant = {
            role: 'assistant';
            name?: string;
            content: string;
        };
        /** Message with arguments to call a function. */
        type FuncCall = {
            role: 'assistant';
            name?: string;
            content: null;
            function_call: Call.Function;
        };
        /** Message with the result of a function call. */
        type FuncResult = {
            role: 'function';
            name: string;
            content: string;
        };
        /** Message with arguments to call one or more tools. */
        type ToolCall = {
            role: 'assistant';
            name?: string;
            content: null;
            tool_calls: Call.Tool[];
        };
        /** Message with the result of a tool call. */
        type ToolResult = {
            role: 'tool';
            tool_call_id: string;
            content: string;
        };
    }
}
