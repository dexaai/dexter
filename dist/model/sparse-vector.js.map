{"version":3,"file":"sparse-vector.js","sourceRoot":"","sources":["../../src/model/sparse-vector.ts"],"names":[],"mappings":"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","sourcesContent":["import pThrottle from 'p-throttle';\nimport pMap from 'p-map';\nimport type { ModelArgs } from './model.js';\nimport { AbstractModel } from './model.js';\nimport type { Model } from './types.js';\nimport { createSpladeClient } from './clients/splade.js';\nimport type { Prettify } from '../utils/helpers.js';\n\nexport type SparseVectorModelArgs = Prettify<\n  Omit<\n    ModelArgs<\n      Model.SparseVector.Client,\n      Model.SparseVector.Config,\n      Model.SparseVector.Run,\n      Model.SparseVector.Response\n    >,\n    'client'\n  > & {\n    serviceUrl?: string;\n  }\n>;\n\nexport class SparseVectorModel extends AbstractModel<\n  Model.SparseVector.Client,\n  Model.SparseVector.Config,\n  Model.SparseVector.Run,\n  Model.SparseVector.Response\n> {\n  modelType = 'sparse-vector' as const;\n  modelProvider = 'custom' as const;\n  serviceUrl: string;\n\n  constructor(args: SparseVectorModelArgs) {\n    const { serviceUrl, ...rest } = args;\n    super({ client: createSpladeClient(), ...rest });\n    const safeProcess = globalThis.process || { env: {} };\n    const tempServiceUrl = serviceUrl || safeProcess.env['SPLADE_SERVICE_URL'];\n    if (!tempServiceUrl) {\n      throw new Error('Missing process.env.SPLADE_SERVICE_URL');\n    }\n    this.serviceUrl = tempServiceUrl;\n  }\n\n  protected async runModel(\n    params: Model.SparseVector.Run & Model.SparseVector.Config,\n    context: Model.Ctx\n  ): Promise<Model.SparseVector.Response> {\n    const start = Date.now();\n    const interval = params.throttleInterval ?? 1000 * 60; // 1 minute\n    const limit = params.throttleLimit ?? 600;\n    const concurrency = params.concurrency ?? 10;\n\n    // Create a throttled version of the function for a single request\n    const throttled = pThrottle({ limit, interval })(\n      async (params: { input: string; model: string }) =>\n        this.runSingle(params, context)\n    );\n\n    // Run the requests in parallel, respecting the maxConcurrentRequests value\n    const inputs = params.input.map((input) => ({\n      input,\n      model: params.model,\n    }));\n    const responses = await pMap(inputs, throttled, { concurrency });\n\n    return {\n      vectors: responses.map((r) => r.vector),\n      cached: false,\n      latency: Date.now() - start,\n    };\n  }\n\n  protected async runSingle(\n    params: { input: string; model: string },\n    context: Model.Ctx\n  ) {\n    const start = Date.now();\n    const vector = await this.client.createSparseVector(\n      params,\n      this.serviceUrl\n    );\n    const latency = Date.now() - start;\n\n    // Don't need tokens for this model\n    const tokens = { prompt: 0, completion: 0, total: 0 } as const;\n    const { input, model } = params;\n    await Promise.allSettled(\n      this.events?.onApiResponse?.map((event) =>\n        Promise.resolve(\n          event({\n            timestamp: new Date().toISOString(),\n            modelType: this.modelType,\n            modelProvider: this.modelProvider,\n            params: { input: [input], model },\n            response: vector,\n            latency,\n            context,\n          })\n        )\n      ) ?? []\n    );\n\n    return { vector, tokens };\n  }\n\n  /** Clone the model and merge/orverride the given properties. */\n  clone(args?: SparseVectorModelArgs): this {\n    const { cacheKey, cache, context, debug, params, events } = args ?? {};\n    // @ts-ignore\n    return new SparseVectorModel({\n      cacheKey: cacheKey || this.cacheKey,\n      cache: cache || this.cache,\n      context: this.mergeContext(this.context, context),\n      debug: debug || this.debug,\n      params: this.mergeParams(this.params, params ?? {}),\n      events: this.mergeEvents(this.events, events || {}),\n    });\n  }\n}\n"]}