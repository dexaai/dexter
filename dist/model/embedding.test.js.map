{"version":3,"file":"embedding.test.js","sourceRoot":"","sources":["../../src/model/embedding.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport type { Model } from './types.js';\nimport { EmbeddingModel } from './embedding.js';\n\nconst FAKE_RESPONSE: Model.Embedding.Response = {\n  data: [\n    {\n      index: 0,\n      object: 'embedding',\n      embedding: [1, 2, 3],\n    },\n  ],\n  model: 'fake-model',\n  object: 'embedding',\n  usage: {\n    prompt_tokens: 1,\n    total_tokens: 1,\n  },\n  embeddings: [[1, 2, 3]],\n  cached: false,\n  cost: 0,\n  latency: 0,\n};\n\ndescribe('EmbeddingModel', () => {\n  let Client: Model.Embedding.Client;\n\n  beforeEach(() => {\n    vi.setSystemTime(new Date());\n    Client = vi.fn() as unknown as Model.Embedding.Client;\n    Client.createEmbeddings = vi\n      .fn()\n      .mockImplementation(() => Promise.resolve(FAKE_RESPONSE));\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n    vi.clearAllTimers();\n  });\n\n  it('runs the model', async () => {\n    const model = new EmbeddingModel({ client: Client });\n    const response = await model.run({\n      input: ['foo'],\n    });\n    expect(response).toEqual(FAKE_RESPONSE);\n  });\n\n  it('triggers events', async () => {\n    const startEvent = vi.fn();\n    const apiResponseEvent = vi.fn();\n    const completeEvent = vi.fn();\n    const model = new EmbeddingModel({\n      client: Client,\n      params: { model: 'gpt-fake' },\n      events: {\n        onStart: [startEvent],\n        onApiResponse: [apiResponseEvent],\n        onComplete: [completeEvent],\n      },\n      context: { userId: '123' },\n    });\n    await model.run({ input: ['foo'] });\n    expect(startEvent).toHaveBeenCalledOnce();\n    expect(apiResponseEvent).toHaveBeenCalledOnce();\n    expect(completeEvent).toHaveBeenCalledOnce();\n    expect(apiResponseEvent).toHaveBeenCalledWith({\n      timestamp: new Date().toISOString(),\n      modelType: 'embedding',\n      modelProvider: 'openai',\n      params: {\n        model: 'gpt-fake',\n        input: ['foo'],\n      },\n      response: FAKE_RESPONSE,\n      latency: 0,\n      context: { userId: '123' },\n    });\n  });\n\n  it('implements clone', async () => {\n    const model = new EmbeddingModel({\n      client: Client,\n      context: { userId: '123' },\n      params: { model: 'gpt-fake' },\n      events: { onApiResponse: [() => {}] },\n    });\n    const clonedModel = model.clone({\n      context: { cloned: true },\n      params: { model: 'gpt-fake-cloned' },\n      events: { onApiResponse: [() => {}] },\n    });\n    expect(clonedModel.getContext()).toEqual({\n      userId: '123',\n      cloned: true,\n    });\n    expect(clonedModel.getParams()).toEqual({\n      model: 'gpt-fake-cloned',\n    });\n    expect(clonedModel.getEvents()?.onApiResponse?.length).toBe(2);\n  });\n\n  it('can cache responses', async () => {\n    const apiResponseEvent = vi.fn();\n    const completeEvent = vi.fn();\n    const model = new EmbeddingModel({\n      cache: new Map(),\n      client: Client,\n      params: { model: 'gpt-fake' },\n      events: {\n        onApiResponse: [apiResponseEvent],\n        onComplete: [completeEvent],\n      },\n      context: { userId: '123' },\n    });\n    await model.run({ input: ['foo'] });\n    expect(apiResponseEvent).toHaveBeenCalledOnce();\n    expect(completeEvent).toHaveBeenCalledOnce();\n    expect(Client.createEmbeddings).toHaveBeenCalledOnce();\n    // Make the same request that should be cached\n    await model.run({ input: ['foo'] });\n    // onApiResponse event isn't triggered for cached responses\n    expect(apiResponseEvent).toHaveBeenCalledOnce();\n    // onComplete is called for cached responses\n    expect(completeEvent).toHaveBeenCalledTimes(2);\n    expect(Client.createEmbeddings).toHaveBeenCalledOnce();\n  });\n});\n"]}