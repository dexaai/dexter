{"version":3,"file":"model.test.js","sourceRoot":"","sources":["../../src/model/model.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { AbstractModel } from './model.js';\nimport type { Model } from './types.js';\n\n/** Simple class for testing */\nclass Test extends AbstractModel<\n  any,\n  { model: string },\n  { input: string },\n  { output: string; cached: boolean }\n> {\n  modelType = 'completion' as Model.Type;\n  modelProvider = 'custom' as Model.Provider;\n  protected async runModel(\n    params: { input: string },\n    context: Model.Ctx\n  ): Promise<{ output: string; cached: boolean }> {\n    if (params.input === 'throw error') {\n      throw new Error('Test error');\n    }\n    return Promise.resolve({\n      output: `${params.input} > AI response with context: ${JSON.stringify(\n        context\n      )}`,\n      cached: false,\n    });\n  }\n  clone() {\n    return this;\n  }\n}\n\ndescribe('AbstractModel', () => {\n  it('can be instantiated', () => {\n    const test = new Test({ params: { model: 'testmodel' }, client: false });\n    expect(test.getParams()).toEqual({\n      model: 'testmodel',\n    });\n  });\n\n  it('runs', async () => {\n    const test = new Test({ params: { model: 'testmodel' }, client: false });\n    const result = await test.run({ input: 'fooin' }, { userId: '123' });\n    expect(result).toEqual({\n      output: 'fooin > AI response with context: {\"userId\":\"123\"}',\n      cached: false,\n    });\n  });\n\n  it('triggers onStart events', async () => {\n    const startEvent = vi.fn();\n    const startEvent2 = vi.fn();\n    const test = new Test({\n      params: { model: 'testmodel' },\n      client: false,\n      events: {\n        onStart: [startEvent, startEvent2],\n      },\n    });\n    await test.run({ input: 'fooin' });\n    expect(startEvent).toHaveBeenCalledOnce();\n    expect(startEvent2).toHaveBeenCalledOnce();\n  });\n\n  it('triggers onError event', async () => {\n    const errorEvent = vi.fn();\n    const test = new Test({\n      params: { model: 'testmodel' },\n      client: false,\n      events: { onError: [errorEvent] },\n    });\n    try {\n      await test.run({ input: 'throw error' });\n    } catch (e) {}\n    expect(errorEvent).toHaveBeenCalledOnce();\n  });\n\n  it('can cache responses', async () => {\n    const completeEvent = vi.fn();\n    const testModel = new Test({\n      client: false,\n      cache: new Map(),\n      params: { model: 'gpt-fake' },\n      events: { onComplete: [completeEvent] },\n      context: { userId: '123' },\n    });\n    await testModel.run({ input: 'foo' });\n    expect(completeEvent).toHaveBeenCalledOnce();\n    expect(completeEvent.mock.lastCall[0].cached).toBe(false);\n    // Make the same request that should be cached\n    await testModel.run({ input: 'foo' });\n    // onComplete is called for cached responses\n    expect(completeEvent).toHaveBeenCalledTimes(2);\n    expect(completeEvent.mock.lastCall[0].cached).toBe(true);\n  });\n});\n"]}