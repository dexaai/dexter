{"version":3,"file":"model.js","sourceRoot":"","sources":["../../src/model/model.ts"],"names":[],"mappings":"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","sourcesContent":["import { createTokenizer } from './utils/tokenizer.js';\nimport type { Model } from './types.js';\nimport { type Prettify, deepMerge } from '../utils/helpers.js';\nimport {\n  type CacheKey,\n  type CacheStorage,\n  defaultCacheKey,\n} from '../utils/cache.js';\n\nexport interface ModelArgs<\n  MClient extends Model.Base.Client,\n  MConfig extends Model.Base.Config,\n  MRun extends Model.Base.Run,\n  MResponse extends Model.Base.Response\n> {\n  /**\n   * A function that returns a cache key for the given params.\n   *\n   * A simple example would be: `(params) => JSON.stringify(params)`\n   *\n   * The default `cacheKey` function uses [hash-object](https://github.com/sindresorhus/hash-object) to create a stable sha256 hash of the params.\n   */\n  cacheKey?: CacheKey<MRun & MConfig, string>;\n  /**\n   * Enables caching for model responses. Must implement `.get(key)` and `.set(key, value)`, both of which can be either sync or async.\n   *\n   * Some examples include: `new Map()`, [quick-lru](https://github.com/sindresorhus/quick-lru), or any [keyv adaptor](https://github.com/jaredwray/keyv).\n   */\n  cache?: CacheStorage<string, MResponse>;\n  client: MClient;\n  context?: Model.Ctx;\n  params: MConfig & Partial<MRun>;\n  events?: Model.Events<MRun & MConfig, MResponse>;\n  /** Whether or not to add default `console.log` event handlers */\n  debug?: boolean;\n}\n\nexport abstract class AbstractModel<\n  MClient extends Model.Base.Client,\n  MConfig extends Model.Base.Config,\n  MRun extends Model.Base.Run,\n  MResponse extends Model.Base.Response,\n  AResponse extends any = any\n> {\n  /** This is used to implement specific model calls */\n  protected abstract runModel(\n    params: Prettify<MRun & MConfig>,\n    context: Model.Ctx\n  ): Promise<MResponse>;\n\n  /** Clone the model, optionally adding new arguments */\n  abstract clone<Args extends ModelArgs<MClient, MConfig, MRun, MResponse>>(\n    args?: Args\n  ): this;\n\n  abstract modelType: Model.Type;\n  abstract modelProvider: Model.Provider;\n  protected cacheKey: CacheKey<MRun & MConfig, string>;\n  protected cache?: CacheStorage<string, MResponse>;\n  protected client: MClient;\n  protected context: Model.Ctx;\n  protected debug: boolean;\n  protected params: MConfig & Partial<MRun>;\n  protected events: Model.Events<MRun & MConfig, MResponse, AResponse>;\n  public tokenizer: Model.ITokenizer;\n\n  constructor(args: ModelArgs<MClient, MConfig, MRun, MResponse>) {\n    this.cacheKey = args.cacheKey ?? defaultCacheKey;\n    this.cache = args.cache;\n    this.client = args.client;\n    this.context = args.context ?? {};\n    this.debug = args.debug ?? false;\n    this.params = args.params;\n    this.events = args.events || {};\n    this.tokenizer = createTokenizer(args.params.model);\n  }\n\n  async run(\n    params: Prettify<MRun & Partial<MConfig>>,\n    context?: Model.Ctx\n  ): Promise<MResponse> {\n    const start = Date.now();\n    const mergedContext = this.mergeContext(this.context, context);\n    const mergedParams = deepMerge(this.params, params) as MRun & MConfig;\n\n    await Promise.allSettled(\n      this.events.onStart?.map((event) =>\n        Promise.resolve(\n          event({\n            timestamp: new Date().toISOString(),\n            modelType: this.modelType,\n            modelProvider: this.modelProvider,\n            params: mergedParams,\n            context: mergedContext,\n          })\n        )\n      ) ?? []\n    );\n\n    const cacheKey = this.cacheKey(mergedParams);\n\n    try {\n      // Check the cache\n      const cachedResponse =\n        this.cache && (await Promise.resolve(this.cache.get(cacheKey)));\n      if (cachedResponse) {\n        const response: MResponse = {\n          ...cachedResponse,\n          cached: true,\n          cost: 0,\n          latency: Date.now() - start,\n        };\n        await Promise.allSettled(\n          this.events.onComplete?.map((event) =>\n            Promise.resolve(\n              event({\n                timestamp: new Date().toISOString(),\n                modelType: this.modelType,\n                modelProvider: this.modelProvider,\n                params: mergedParams,\n                response,\n                context: mergedContext,\n                cached: true,\n              })\n            )\n          ) ?? []\n        );\n        return response;\n      }\n\n      // Run the model (e.g. make the API request)\n      const response = await this.runModel(mergedParams, mergedContext);\n\n      await Promise.allSettled(\n        this.events.onComplete?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              modelType: this.modelType,\n              modelProvider: this.modelProvider,\n              params: mergedParams,\n              response,\n              context: mergedContext,\n              cached: false,\n            })\n          )\n        ) ?? []\n      );\n\n      // Update the cache\n      await Promise.resolve(this.cache?.set(cacheKey, response));\n\n      return response;\n    } catch (error) {\n      await Promise.allSettled(\n        this.events?.onError?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              modelType: this.modelType,\n              modelProvider: this.modelProvider,\n              params: mergedParams,\n              error,\n              context: mergedContext,\n            })\n          )\n        ) ?? []\n      );\n      throw error;\n    }\n  }\n\n  /** Set the cache to a new cache. Set to undefined to remove existing. */\n  setCache(cache: typeof this.cache | undefined): this {\n    this.cache = cache;\n    return this;\n  }\n\n  /** Get the current client */\n  getClient() {\n    return this.client;\n  }\n\n  /** Set the client to a new OpenAI API client. */\n  setClient(client: typeof this.client): this {\n    this.client = client;\n    return this;\n  }\n\n  /** Get the current context */\n  getContext() {\n    return this.context;\n  }\n\n  /** Add the context. Overrides existing keys. */\n  updateContext(context: typeof this.context): this {\n    this.context = this.mergeContext(this.context, context);\n    return this;\n  }\n\n  /** Set the context to a new context. Removes all existing values. */\n  setContext(context: Model.Ctx): this {\n    this.context = context;\n    return this;\n  }\n\n  /** Get the current params */\n  getParams() {\n    return this.params;\n  }\n\n  /** Add the params. Overrides existing keys. */\n  addParams(params: Partial<typeof this.params>): this {\n    const modelChanged = params.model && params.model !== this.params.model;\n    this.params = this.mergeParams(this.params, params);\n    if (modelChanged) {\n      this.tokenizer = createTokenizer(this.params.model);\n    }\n    return this;\n  }\n\n  /** Set the params to a new params. Removes all existing values. */\n  setParams(params: typeof this.params): this {\n    this.params = params;\n    this.tokenizer = createTokenizer(this.params.model);\n    return this;\n  }\n\n  /** Get the current event handlers */\n  getEvents() {\n    return this.events;\n  }\n\n  /** Add event handlers to the model. */\n  addEvents(events: typeof this.events): this {\n    this.events = this.mergeEvents(this.events, events);\n    return this;\n  }\n\n  /**\n   * Set the event handlers to a new set of events. Removes all existing event handlers.\n   * Set to empty object `{}` to remove all events.\n   */\n  setEvents(events: typeof this.events): this {\n    this.events = events;\n    return this;\n  }\n\n  protected mergeContext(\n    classContext: Model.Ctx,\n    newContext?: Model.Ctx\n  ): Model.Ctx {\n    if (!newContext) return classContext;\n    return deepMerge(classContext, newContext);\n  }\n\n  protected mergeParams(\n    classParams: Partial<typeof this.params>,\n    newParams: Partial<typeof this.params>\n  ): typeof this.params {\n    return deepMerge(classParams, newParams) as any;\n  }\n\n  protected mergeEvents(\n    existingEvents: typeof this.events,\n    newEvents: typeof this.events\n  ): typeof this.events {\n    return deepMerge(existingEvents, newEvents);\n  }\n}\n"]}