{"version":3,"file":"splade.js","sourceRoot":"","sources":["../../../src/model/clients/splade.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AAGpB,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,CAAC;IACvC,KAAK,CAAC,kBAAkB,CACtB,MAGC,EACD,UAAkB;QAElB,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,EAAE;iBAC1B,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO,EAAE,IAAI,GAAG,EAAE;gBAClB,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE;aAC7B,CAAC;iBACD,IAAI,EAA6B,CAAC;YACrC,OAAO,YAAY,CAAC;QACtB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,6DAA6D;YAC7D,MAAM,IAAI,KAAK,CAAC,gCAAgC,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;CACF,CAAC,CAAC","sourcesContent":["import ky from 'ky';\nimport type { Model } from '../types.js';\n\nexport const createSpladeClient = () => ({\n  async createSparseVector(\n    params: {\n      input: string;\n      model: string;\n    },\n    serviceUrl: string\n  ): Promise<Model.SparseVector.Vector> {\n    try {\n      const sparseValues = await ky\n        .post(serviceUrl, {\n          timeout: 1000 * 60,\n          json: { text: params.input },\n        })\n        .json<Model.SparseVector.Vector>();\n      return sparseValues;\n    } catch (e) {\n      // @ts-ignore: TODO: add custom Error class that handles this\n      throw new Error('Failed to create splade vector', { cause: e });\n    }\n  },\n});\n"]}