{"version":3,"file":"openai.js","sourceRoot":"","sources":["../../../src/model/clients/openai.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAE5C,6BAA6B;AAC7B,MAAM,aAAa,GAAG,IAAI,GAAG,EAAwB,CAAC;AAEtD,8CAA8C;AAC9C,MAAM,UAAU,kBAAkB;AAChC,4CAA4C;AAC5C,IAAoD;AACpD,wCAAwC;AACxC,QAAQ,GAAG,KAAK;IAEhB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,YAAY;YAAE,OAAO,YAAY,CAAC;IACxC,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;IACtC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;IAEhD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,uFAAuF;AACvF,MAAM,UAAU,UAAU,CAA0B,OAAY;IAC9D,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;IAExC,qCAAqC;IACrC,IAAI,CAAC,IAAI;QAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAS,CAAC;IAE3C,iDAAiD;IACjD,MAAM,aAAa,GAAG,IAAI;SACvB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;SAC7B,WAAW,EAAE,CAAC;IAEjB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAS,CAAC;AACvD,CAAC","sourcesContent":["import type { ChatMessage } from 'openai-fetch';\nimport { OpenAIClient } from 'openai-fetch';\n\n/** Cached OpenAI clients. */\nconst cachedClients = new Map<string, OpenAIClient>();\n\n/** Create a new openai-fetch OpenAIClient. */\nexport function createOpenAIClient(\n  /** Options to pass to the OpenAI client. */\n  opts?: ConstructorParameters<typeof OpenAIClient>[0],\n  /** Force a new client to be created. */\n  forceNew = false\n): OpenAIClient {\n  if (!forceNew) {\n    const cachedClient = cachedClients.get(JSON.stringify(opts));\n    if (cachedClient) return cachedClient;\n  }\n\n  const client = new OpenAIClient(opts);\n  cachedClients.set(JSON.stringify(opts), client);\n\n  return client;\n}\n\n/** Reformat name to adhere to OpenAI's naming restrictions: /^[a-zA-Z0-9_-]{1,64}$/ */\nexport function formatName<Msg extends ChatMessage>(message: Msg): Msg {\n  const { name, role, content } = message;\n\n  // Remove the name key if it's empty.\n  if (!name) return { role, content } as Msg;\n\n  // Reformat to meet OpenAI's naming restrictions.\n  const formattedName = name\n    .replace(/\\s/g, '-')\n    .replace(/[^a-zA-Z0-9_]/g, '')\n    .toLowerCase();\n\n  return { role, name: formattedName, content } as Msg;\n}\n"]}