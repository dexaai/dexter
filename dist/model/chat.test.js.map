{"version":3,"file":"chat.test.js","sourceRoot":"","sources":["../../src/model/chat.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it, vi } from 'vitest';\nimport type { Model } from './types.js';\nimport { ChatModel } from './chat.js';\n\nconst FAKE_RESPONSE: Model.Chat.Response = {\n  message: {\n    content: 'Hi from fake AI',\n    role: 'assistant',\n  },\n  cached: false,\n  latency: 0,\n  cost: 0,\n  created: 0,\n  id: 'fake-id',\n  model: 'gpt-fake',\n  object: 'chat.completion',\n  usage: {\n    completion_tokens: 1,\n    prompt_tokens: 1,\n    total_tokens: 2,\n  },\n  choices: [\n    {\n      finish_reason: 'stop',\n      index: 0,\n      message: {\n        content: 'Hi from fake AI',\n        role: 'assistant',\n      },\n    },\n  ],\n};\n\ndescribe('ChatModel', () => {\n  let Client: Model.Chat.Client;\n\n  beforeEach(() => {\n    vi.setSystemTime(new Date());\n    Client = vi.fn() as unknown as Model.Chat.Client;\n    Client.createChatCompletion = vi\n      .fn()\n      .mockImplementation(() => Promise.resolve(FAKE_RESPONSE));\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n    vi.clearAllTimers();\n  });\n\n  it('runs the model', async () => {\n    const chatModel = new ChatModel({ client: Client });\n    const response = await chatModel.run({\n      messages: [{ role: 'user', content: 'content' }],\n    });\n    expect(response).toEqual(FAKE_RESPONSE);\n  });\n\n  it('triggers events', async () => {\n    const startEvent = vi.fn();\n    const apiResponseEvent = vi.fn();\n    const completeEvent = vi.fn();\n    const chatModel = new ChatModel({\n      client: Client,\n      params: { model: 'gpt-fake' },\n      events: {\n        onStart: [startEvent],\n        onApiResponse: [apiResponseEvent],\n        onComplete: [completeEvent],\n      },\n      context: { userId: '123' },\n    });\n    await chatModel.run({\n      messages: [{ role: 'user', content: 'content' }],\n    });\n    expect(startEvent).toHaveBeenCalledOnce();\n    expect(apiResponseEvent).toHaveBeenCalledOnce();\n    expect(completeEvent).toHaveBeenCalledOnce();\n    expect(apiResponseEvent).toHaveBeenCalledWith({\n      timestamp: new Date().toISOString(),\n      modelType: 'chat',\n      modelProvider: 'openai',\n      params: {\n        model: 'gpt-fake',\n        messages: [{ role: 'user', content: 'content' }],\n      },\n      response: FAKE_RESPONSE,\n      latency: 0,\n      context: { userId: '123' },\n    });\n  });\n\n  it('implements clone', async () => {\n    const chatModel = new ChatModel({\n      client: Client,\n      context: { userId: '123' },\n      params: { model: 'gpt-fake' },\n      events: { onApiResponse: [() => {}] },\n    });\n    const clonedModel = chatModel.clone({\n      context: { cloned: true },\n      params: { model: 'gpt-fake-cloned' },\n      events: { onApiResponse: [() => {}] },\n    });\n    expect(clonedModel.getContext()).toEqual({\n      userId: '123',\n      cloned: true,\n    });\n    expect(clonedModel.getParams()).toEqual({\n      model: 'gpt-fake-cloned',\n    });\n    expect(clonedModel.getEvents()?.onApiResponse?.length).toBe(2);\n  });\n\n  it('can cache responses', async () => {\n    const apiResponseEvent = vi.fn();\n    const completeEvent = vi.fn();\n    const chatModel = new ChatModel({\n      cache: new Map(),\n      client: Client,\n      params: { model: 'gpt-fake' },\n      events: {\n        onApiResponse: [apiResponseEvent],\n        onComplete: [completeEvent],\n      },\n      context: { userId: '123' },\n    });\n    await chatModel.run({\n      messages: [{ role: 'user', content: 'content' }],\n    });\n    expect(apiResponseEvent).toHaveBeenCalledOnce();\n    expect(completeEvent).toHaveBeenCalledOnce();\n    expect(Client.createChatCompletion).toHaveBeenCalledOnce();\n    // Make the same request that should be cached\n    await chatModel.run({\n      messages: [{ role: 'user', content: 'content' }],\n    });\n    // onApiResponse event isn't triggered for cached responses\n    expect(apiResponseEvent).toHaveBeenCalledOnce();\n    // onComplete is called for cached responses\n    expect(completeEvent).toHaveBeenCalledTimes(2);\n    expect(Client.createChatCompletion).toHaveBeenCalledOnce();\n  });\n});\n"]}