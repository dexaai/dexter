{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../src/model/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SetOptional } from 'type-fest';\nimport type { ModelArgs } from './model.js';\nimport type { Model } from './types.js';\nimport { calculateCost } from './utils/calculate-cost.js';\nimport { createOpenAIClient } from './clients/openai.js';\nimport { AbstractModel } from './model.js';\n\nexport type ChatModelArgs = SetOptional<\n  ModelArgs<\n    Model.Chat.Client,\n    Model.Chat.Config,\n    Model.Chat.Run,\n    Model.Chat.Response\n  >,\n  'client' | 'params'\n>;\n\nexport class ChatModel extends AbstractModel<\n  Model.Chat.Client,\n  Model.Chat.Config,\n  Model.Chat.Run,\n  Model.Chat.Response,\n  Model.Chat.ApiResponse\n> {\n  modelType = 'chat' as const;\n  modelProvider = 'openai' as const;\n\n  constructor(args?: ChatModelArgs) {\n    let { client, params, ...rest } = args ?? {};\n    // Add a default client if none is provided\n    client = client ?? createOpenAIClient();\n    // Set default model if no params are provided\n    params = params ?? { model: 'gpt-3.5-turbo' };\n    super({ client, params, ...rest });\n    if (args?.debug) {\n      this.addEvents({\n        onStart: [logInput],\n        onComplete: [logResponse],\n      });\n    }\n  }\n\n  protected async runModel(\n    { handleUpdate, ...params }: Model.Chat.Run & Model.Chat.Config,\n    context: Model.Ctx\n  ): Promise<Model.Chat.Response> {\n    const start = Date.now();\n\n    // Use non-streaming API if no handler is provided\n    if (!handleUpdate) {\n      // Make the OpenAI API request\n      const response = await this.client.createChatCompletion(params);\n\n      await Promise.allSettled(\n        this.events?.onApiResponse?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              modelType: this.modelType,\n              modelProvider: this.modelProvider,\n              params,\n              response,\n              latency: Date.now() - start,\n              context,\n            })\n          )\n        ) ?? []\n      );\n\n      const modelResponse: Model.Chat.Response = {\n        ...response,\n        message: response.choices[0].message,\n        cached: false,\n        latency: Date.now() - start,\n        cost: calculateCost({ model: params.model, tokens: response.usage }),\n      };\n\n      return modelResponse;\n    } else {\n      // Use the streaming API if a handler is provided\n      const stream = await this.client.streamChatCompletion(params);\n\n      // Keep track of the stream's output\n      let chunk = {} as Model.Chat.CompletionChunk;\n\n      // Get a reader from the stream\n      const reader = stream.getReader();\n\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          // If the stream is done, break out of the loop and save the conversation\n          // to the cache before returning.\n          break;\n        }\n\n        // Create the initial chunk\n        if (!chunk.id) {\n          chunk = value;\n        }\n\n        const delta = value.choices[0].delta;\n\n        // Send an update to the caller\n        const messageContent = delta?.content;\n        if (typeof messageContent === 'string') {\n          try {\n            handleUpdate(messageContent);\n          } catch (err) {\n            console.error('Error handling update', err);\n          }\n        }\n\n        // Merge the delta into the chunk\n        const { content, tool_calls } = delta;\n                \n        if (content) {\n          chunk.choices[0].delta.content = `${chunk.choices[0].delta.content}${content}`;\n        }\n        \n        if (tool_calls) {\n          const mergedToolCalls = chunk.choices[0].delta.tool_calls || [];\n\n          tool_calls.forEach((new_call) => {\n            if (new_call.function && typeof new_call.function.arguments === 'string') {\n              const index = new_call.index;\n              let existing_call = mergedToolCalls.find(call => call.index === index);\n\n              if (existing_call && existing_call.function) {\n                existing_call.function.arguments = (existing_call.function.arguments || '') + new_call.function.arguments;\n              } else {\n                mergedToolCalls.push({...new_call, function: { ...new_call.function } });\n              }\n            }\n          });\n\n          chunk.choices[0].delta.tool_calls = mergedToolCalls;\n        }\n      }\n\n      // Once the stream is done, release the reader\n      reader.releaseLock();\n\n      const choice = chunk.choices[0];\n      const response: Model.Chat.ApiResponse = {\n        ...chunk,\n        object: 'chat.completion',\n        choices: [\n          {\n            finish_reason:\n              choice.finish_reason as Model.Chat.Response['choices'][0]['finish_reason'],\n            index: choice.index,\n            message: choice.delta as Model.Message & { role: 'assistant' },\n          },\n        ],\n      };\n\n      // Calculate the token usage and add it to the response.\n      // OpenAI doesn't provide token usage for streaming requests.\n      const promptTokens = this.tokenizer.countTokens(params.messages);\n      const completionTokens = this.tokenizer.countTokens(\n        response.choices[0].message\n      );\n      response.usage = {\n        completion_tokens: completionTokens,\n        prompt_tokens: promptTokens,\n        total_tokens: promptTokens + completionTokens,\n      };\n\n      await Promise.allSettled(\n        this.events?.onApiResponse?.map((event) =>\n          Promise.resolve(\n            event({\n              timestamp: new Date().toISOString(),\n              modelType: this.modelType,\n              modelProvider: this.modelProvider,\n              params,\n              response,\n              latency: Date.now() - start,\n              context,\n            })\n          )\n        ) ?? []\n      );\n\n      const modelResponse: Model.Chat.Response = {\n        ...response,\n        message: response.choices[0].message,\n        cached: false,\n        latency: Date.now() - start,\n        cost: calculateCost({ model: params.model, tokens: response.usage }),\n      };\n\n      return modelResponse;\n    }\n  }\n\n  /** Clone the model and merge/orverride the given properties. */\n  clone(args?: ChatModelArgs): this {\n    const { cacheKey, cache, client, context, debug, params, events } =\n      args ?? {};\n\n    // @ts-ignore\n    return new ChatModel({\n      cacheKey: cacheKey ?? this.cacheKey,\n      cache: cache ?? this.cache,\n      client: client ?? this.client,\n      context: this.mergeContext(this.context, context),\n      debug: debug ?? this.debug,\n      params: this.mergeParams(this.params, params ?? {}),\n      events: this.mergeEvents(this.events, events || {}),\n    });\n  }\n}\n\n/**\n * Verbose logging for debugging prompts\n */\nfunction logInput(args: { params: { messages: Model.Message[] } }) {\n  console.debug(`-----> [Request] ----->`);\n  console.debug();\n  args.params.messages.forEach(logMessage);\n}\n\nfunction logResponse(args: {\n  response: {\n    usage?: {\n      completion_tokens: number;\n      prompt_tokens: number;\n    };\n    cached: boolean;\n    latency?: number;\n    choices: { message: Model.Message }[];\n    cost?: number;\n  };\n  params: { messages: Model.Message[] };\n}) {\n  const { usage, cost, latency, choices } = args.response;\n  const tokens = {\n    prompt: usage?.prompt_tokens ?? 0,\n    completion: usage?.completion_tokens ?? 0,\n    total: (usage?.prompt_tokens ?? 0) + (usage?.completion_tokens ?? 0),\n  };\n  const message = choices[0].message;\n  const tokensStr = `[Tokens: ${tokens.prompt} + ${tokens.completion} = ${tokens.total}]`;\n  const latencyStr = latency ? `[Latency: ${latency}ms]` : '';\n  const costStr =\n    typeof cost === 'number'\n      ? `[Cost: $${(cost / 100).toFixed(5)}]`\n      : `[Cost: UNKNOWN]`;\n  const meta = [latencyStr, costStr, tokensStr].filter(Boolean).join('---');\n  console.debug(`<===== [Response] <===== ${meta}`);\n  console.debug();\n  logMessage(message, args.params.messages.length + 1);\n}\n\nfunction logMessage(message: Model.Message, index: number) {\n  console.debug(\n    `[${index}] ${message.role.toUpperCase()}:${\n      message.name ? ` (${message.name}) ` : ''\n    }`\n  );\n  if (message.content) {\n    console.debug(message.content);\n  }\n  if (message.function_call) {\n    console.debug(`Function call: ${message.function_call.name}`);\n    if (message.function_call.arguments) {\n      try {\n        const formatted = JSON.stringify(\n          JSON.parse(message.function_call.arguments),\n          null,\n          2\n        );\n        console.debug(formatted);\n      } catch (err) {\n        console.debug(message.function_call.arguments);\n      }\n    }\n  } else if (message.tool_calls) {\n    for (const toolCall of message.tool_calls) {\n      const toolCallFunction = toolCall.function;\n      console.debug(\n        `tool call: ${toolCall.type}${\n          toolCallFunction ? `:${toolCallFunction.name}` : ''\n        } (id ${toolCall.id})`\n      );\n      if (toolCall.type !== 'function' || !toolCallFunction) continue;\n      if (toolCallFunction.arguments) {\n        try {\n          const formatted = JSON.stringify(\n            JSON.parse(toolCallFunction.arguments),\n            null,\n            2\n          );\n          console.debug(formatted);\n        } catch (err) {\n          console.debug(toolCallFunction.arguments);\n        }\n      }\n    }\n  }\n  console.debug();\n}\n"]}