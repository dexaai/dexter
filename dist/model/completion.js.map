{"version":3,"file":"completion.js","sourceRoot":"","sources":["../../src/model/completion.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAC1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAY3C,MAAM,OAAO,eAAgB,SAAQ,aAMpC;IACC,SAAS,GAAG,YAAqB,CAAC;IAClC,aAAa,GAAG,QAAiB,CAAC;IAElC,YAAY,IAA0B;QACpC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7C,2CAA2C;QAC3C,MAAM,GAAG,MAAM,IAAI,kBAAkB,EAAE,CAAC;QACxC,8CAA8C;QAC9C,MAAM,GAAG,MAAM,IAAI,EAAE,KAAK,EAAE,wBAAwB,EAAE,CAAC;QACvD,KAAK,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;IAES,KAAK,CAAC,QAAQ,CACtB,MAAsD,EACtD,OAAkB;QAElB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEzB,8BAA8B;QAC9B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAE7D,MAAM,OAAO,CAAC,UAAU,CACtB,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACxC,OAAO,CAAC,OAAO,CACb,KAAK,CAAC;YACJ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,MAAM;YACN,QAAQ;YACR,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK;YAC3B,OAAO;SACR,CAAC,CACH,CACF,IAAI,EAAE,CACR,CAAC;QAEF,MAAM,aAAa,GAA8B;YAC/C,GAAG,QAAQ;YACX,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI;YACpC,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,aAAa,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC;SACrE,CAAC;QAEF,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,gEAAgE;IAChE,KAAK,CAAC,IAA0B;QAC9B,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,GAC/D,IAAI,IAAI,EAAE,CAAC;QAEb,aAAa;QACb,OAAO,IAAI,eAAe,CAAC;YACzB,QAAQ,EAAE,QAAQ,IAAI,IAAI,CAAC,QAAQ;YACnC,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,KAAK;YAC1B,MAAM,EAAE,MAAM,IAAI,IAAI,CAAC,MAAM;YAC7B,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;YACjD,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,KAAK;YAC1B,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC;YACnD,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC;SACpD,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import type { SetOptional } from 'type-fest';\nimport type { ModelArgs } from './model.js';\nimport type { Model } from './types.js';\nimport { calculateCost } from './utils/calculate-cost.js';\nimport { createOpenAIClient } from './clients/openai.js';\nimport { AbstractModel } from './model.js';\n\nexport type CompletionModelArgs = SetOptional<\n  ModelArgs<\n    Model.Completion.Client,\n    Model.Completion.Config,\n    Model.Completion.Run,\n    Model.Completion.Response\n  >,\n  'client' | 'params'\n>;\n\nexport class CompletionModel extends AbstractModel<\n  Model.Completion.Client,\n  Model.Completion.Config,\n  Model.Completion.Run,\n  Model.Completion.Response,\n  Model.Completion.ApiResponse\n> {\n  modelType = 'completion' as const;\n  modelProvider = 'openai' as const;\n\n  constructor(args?: CompletionModelArgs) {\n    let { client, params, ...rest } = args ?? {};\n    // Add a default client if none is provided\n    client = client ?? createOpenAIClient();\n    // Set default model if no params are provided\n    params = params ?? { model: 'gpt-3.5-turbo-instruct' };\n    super({ client, params, ...rest });\n  }\n\n  protected async runModel(\n    params: Model.Completion.Run & Model.Completion.Config,\n    context: Model.Ctx\n  ): Promise<Model.Completion.Response> {\n    const start = Date.now();\n\n    // Make the OpenAI API request\n    const response = await this.client.createCompletions(params);\n\n    await Promise.allSettled(\n      this.events?.onApiResponse?.map((event) =>\n        Promise.resolve(\n          event({\n            timestamp: new Date().toISOString(),\n            modelType: this.modelType,\n            modelProvider: this.modelProvider,\n            params,\n            response,\n            latency: Date.now() - start,\n            context,\n          })\n        )\n      ) ?? []\n    );\n\n    const modelResponse: Model.Completion.Response = {\n      ...response,\n      completion: response.choices[0].text,\n      cached: false,\n      cost: calculateCost({ model: params.model, tokens: response.usage }),\n    };\n\n    return modelResponse;\n  }\n\n  /** Clone the model and merge/orverride the given properties. */\n  clone(args?: CompletionModelArgs): this {\n    const { cacheKey, cache, client, context, debug, params, events } =\n      args ?? {};\n\n    // @ts-ignore\n    return new CompletionModel({\n      cacheKey: cacheKey ?? this.cacheKey,\n      cache: cache ?? this.cache,\n      client: client ?? this.client,\n      context: this.mergeContext(this.context, context),\n      debug: debug ?? this.debug,\n      params: this.mergeParams(this.params, params ?? {}),\n      events: this.mergeEvents(this.events, events || {}),\n    });\n  }\n}\n"]}